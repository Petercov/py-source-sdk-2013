// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "gamerules.h"
#include "multiplay_gamerules.h"
#include "singleplay_gamerules.h"
#include "teamplay_gamerules.h"
#include "srcpy_gamerules.h"
#include "hl2mp/hl2mp_player.h"
#include "hl2mp/hl2mp_gamerules.h"
#include "ammodef.h"
#include "items.h"
#include "tier0/valve_minmax_off.h"
#include "srcpy.h"
#include "tier0/valve_minmax_on.h"
#include "tier0/memdbgon.h"
#include "CSingleplayRules_pypp.hpp"

namespace bp = boost::python;

struct CSingleplayRules_wrapper : CSingleplayRules, bp::wrapper< CSingleplayRules > {

    CSingleplayRules_wrapper( )
    : CSingleplayRules( )
      , bp::wrapper< CSingleplayRules >(){
        // null constructor
    
    }

    virtual bool AllowAutoTargetCrosshair(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "AllowAutoTargetCrosshair: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling AllowAutoTargetCrosshair(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_AllowAutoTargetCrosshair = this->get_override( "AllowAutoTargetCrosshair" );
        if( func_AllowAutoTargetCrosshair.ptr() != Py_None )
            try {
                return func_AllowAutoTargetCrosshair(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::AllowAutoTargetCrosshair(  );
            }
        else
            return this->CSingleplayRules::AllowAutoTargetCrosshair(  );
    }
    
    bool default_AllowAutoTargetCrosshair(  ) {
        return CSingleplayRules::AllowAutoTargetCrosshair( );
    }

    virtual bool AllowDamage( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "AllowDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling AllowDamage( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_AllowDamage = this->get_override( "AllowDamage" );
        if( func_AllowDamage.ptr() != Py_None )
            try {
                return func_AllowDamage( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::AllowDamage( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            return this->CSingleplayRules::AllowDamage( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    bool default_AllowDamage( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        return CSingleplayRules::AllowDamage( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual bool CanHaveItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanHaveItem: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanHaveItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanHaveItem = this->get_override( "CanHaveItem" );
        if( func_CanHaveItem.ptr() != Py_None )
            try {
                return func_CanHaveItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::CanHaveItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
            }
        else
            return this->CSingleplayRules::CanHaveItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
    }
    
    bool default_CanHaveItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        return CSingleplayRules::CanHaveItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
    }

    virtual bool ClientConnected( ::edict_t * pEntity, char const * pszName, char const * pszAddress, char * reject, int maxrejectlen ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientConnected: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientConnected( boost::python::ptr(pEntity), pszName, pszAddress, reject, maxrejectlen ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientConnected = this->get_override( "ClientConnected" );
        if( func_ClientConnected.ptr() != Py_None )
            try {
                return func_ClientConnected( boost::python::ptr(pEntity), pszName, pszAddress, reject, maxrejectlen );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::ClientConnected( boost::python::ptr(pEntity), pszName, pszAddress, reject, maxrejectlen );
            }
        else
            return this->CSingleplayRules::ClientConnected( boost::python::ptr(pEntity), pszName, pszAddress, reject, maxrejectlen );
    }
    
    bool default_ClientConnected( ::edict_t * pEntity, char const * pszName, char const * pszAddress, char * reject, int maxrejectlen ) {
        return CSingleplayRules::ClientConnected( boost::python::ptr(pEntity), pszName, pszAddress, reject, maxrejectlen );
    }

    virtual void ClientDisconnected( ::edict_t * pClient ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientDisconnected: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientDisconnected( boost::python::ptr(pClient) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientDisconnected = this->get_override( "ClientDisconnected" );
        if( func_ClientDisconnected.ptr() != Py_None )
            try {
                func_ClientDisconnected( boost::python::ptr(pClient) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::ClientDisconnected( boost::python::ptr(pClient) );
            }
        else
            this->CSingleplayRules::ClientDisconnected( boost::python::ptr(pClient) );
    }
    
    void default_ClientDisconnected( ::edict_t * pClient ) {
        CSingleplayRules::ClientDisconnected( boost::python::ptr(pClient) );
    }

    virtual int Damage_GetNoPhysicsForce(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_GetNoPhysicsForce: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_GetNoPhysicsForce(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_GetNoPhysicsForce = this->get_override( "Damage_GetNoPhysicsForce" );
        if( func_Damage_GetNoPhysicsForce.ptr() != Py_None )
            try {
                return func_Damage_GetNoPhysicsForce(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_GetNoPhysicsForce(  );
            }
        else
            return this->CSingleplayRules::Damage_GetNoPhysicsForce(  );
    }
    
    int default_Damage_GetNoPhysicsForce(  ) {
        return CSingleplayRules::Damage_GetNoPhysicsForce( );
    }

    virtual int Damage_GetShouldGibCorpse(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_GetShouldGibCorpse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_GetShouldGibCorpse(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_GetShouldGibCorpse = this->get_override( "Damage_GetShouldGibCorpse" );
        if( func_Damage_GetShouldGibCorpse.ptr() != Py_None )
            try {
                return func_Damage_GetShouldGibCorpse(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_GetShouldGibCorpse(  );
            }
        else
            return this->CSingleplayRules::Damage_GetShouldGibCorpse(  );
    }
    
    int default_Damage_GetShouldGibCorpse(  ) {
        return CSingleplayRules::Damage_GetShouldGibCorpse( );
    }

    virtual int Damage_GetShouldNotBleed(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_GetShouldNotBleed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_GetShouldNotBleed(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_GetShouldNotBleed = this->get_override( "Damage_GetShouldNotBleed" );
        if( func_Damage_GetShouldNotBleed.ptr() != Py_None )
            try {
                return func_Damage_GetShouldNotBleed(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_GetShouldNotBleed(  );
            }
        else
            return this->CSingleplayRules::Damage_GetShouldNotBleed(  );
    }
    
    int default_Damage_GetShouldNotBleed(  ) {
        return CSingleplayRules::Damage_GetShouldNotBleed( );
    }

    virtual int Damage_GetShowOnHud(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_GetShowOnHud: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_GetShowOnHud(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_GetShowOnHud = this->get_override( "Damage_GetShowOnHud" );
        if( func_Damage_GetShowOnHud.ptr() != Py_None )
            try {
                return func_Damage_GetShowOnHud(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_GetShowOnHud(  );
            }
        else
            return this->CSingleplayRules::Damage_GetShowOnHud(  );
    }
    
    int default_Damage_GetShowOnHud(  ) {
        return CSingleplayRules::Damage_GetShowOnHud( );
    }

    virtual int Damage_GetTimeBased(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_GetTimeBased: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_GetTimeBased(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_GetTimeBased = this->get_override( "Damage_GetTimeBased" );
        if( func_Damage_GetTimeBased.ptr() != Py_None )
            try {
                return func_Damage_GetTimeBased(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_GetTimeBased(  );
            }
        else
            return this->CSingleplayRules::Damage_GetTimeBased(  );
    }
    
    int default_Damage_GetTimeBased(  ) {
        return CSingleplayRules::Damage_GetTimeBased( );
    }

    virtual bool Damage_IsTimeBased( int iDmgType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_IsTimeBased: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_IsTimeBased( iDmgType ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_IsTimeBased = this->get_override( "Damage_IsTimeBased" );
        if( func_Damage_IsTimeBased.ptr() != Py_None )
            try {
                return func_Damage_IsTimeBased( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_IsTimeBased( iDmgType );
            }
        else
            return this->CSingleplayRules::Damage_IsTimeBased( iDmgType );
    }
    
    bool default_Damage_IsTimeBased( int iDmgType ) {
        return CSingleplayRules::Damage_IsTimeBased( iDmgType );
    }

    virtual bool Damage_NoPhysicsForce( int iDmgType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_NoPhysicsForce: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_NoPhysicsForce( iDmgType ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_NoPhysicsForce = this->get_override( "Damage_NoPhysicsForce" );
        if( func_Damage_NoPhysicsForce.ptr() != Py_None )
            try {
                return func_Damage_NoPhysicsForce( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_NoPhysicsForce( iDmgType );
            }
        else
            return this->CSingleplayRules::Damage_NoPhysicsForce( iDmgType );
    }
    
    bool default_Damage_NoPhysicsForce( int iDmgType ) {
        return CSingleplayRules::Damage_NoPhysicsForce( iDmgType );
    }

    virtual bool Damage_ShouldGibCorpse( int iDmgType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_ShouldGibCorpse: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_ShouldGibCorpse( iDmgType ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_ShouldGibCorpse = this->get_override( "Damage_ShouldGibCorpse" );
        if( func_Damage_ShouldGibCorpse.ptr() != Py_None )
            try {
                return func_Damage_ShouldGibCorpse( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_ShouldGibCorpse( iDmgType );
            }
        else
            return this->CSingleplayRules::Damage_ShouldGibCorpse( iDmgType );
    }
    
    bool default_Damage_ShouldGibCorpse( int iDmgType ) {
        return CSingleplayRules::Damage_ShouldGibCorpse( iDmgType );
    }

    virtual bool Damage_ShouldNotBleed( int iDmgType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_ShouldNotBleed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_ShouldNotBleed( iDmgType ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_ShouldNotBleed = this->get_override( "Damage_ShouldNotBleed" );
        if( func_Damage_ShouldNotBleed.ptr() != Py_None )
            try {
                return func_Damage_ShouldNotBleed( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_ShouldNotBleed( iDmgType );
            }
        else
            return this->CSingleplayRules::Damage_ShouldNotBleed( iDmgType );
    }
    
    bool default_Damage_ShouldNotBleed( int iDmgType ) {
        return CSingleplayRules::Damage_ShouldNotBleed( iDmgType );
    }

    virtual bool Damage_ShowOnHUD( int iDmgType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Damage_ShowOnHUD: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Damage_ShowOnHUD( iDmgType ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Damage_ShowOnHUD = this->get_override( "Damage_ShowOnHUD" );
        if( func_Damage_ShowOnHUD.ptr() != Py_None )
            try {
                return func_Damage_ShowOnHUD( iDmgType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::Damage_ShowOnHUD( iDmgType );
            }
        else
            return this->CSingleplayRules::Damage_ShowOnHUD( iDmgType );
    }
    
    bool default_Damage_ShowOnHUD( int iDmgType ) {
        return CSingleplayRules::Damage_ShowOnHUD( iDmgType );
    }

    virtual int DeadPlayerAmmo( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeadPlayerAmmo: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeadPlayerAmmo( boost::python::ptr(pPlayer) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeadPlayerAmmo = this->get_override( "DeadPlayerAmmo" );
        if( func_DeadPlayerAmmo.ptr() != Py_None )
            try {
                return func_DeadPlayerAmmo( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::DeadPlayerAmmo( boost::python::ptr(pPlayer) );
            }
        else
            return this->CSingleplayRules::DeadPlayerAmmo( boost::python::ptr(pPlayer) );
    }
    
    int default_DeadPlayerAmmo( ::CBasePlayer * pPlayer ) {
        return CSingleplayRules::DeadPlayerAmmo( boost::python::ptr(pPlayer) );
    }

    virtual int DeadPlayerWeapons( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeadPlayerWeapons: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeadPlayerWeapons( boost::python::ptr(pPlayer) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeadPlayerWeapons = this->get_override( "DeadPlayerWeapons" );
        if( func_DeadPlayerWeapons.ptr() != Py_None )
            try {
                return func_DeadPlayerWeapons( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::DeadPlayerWeapons( boost::python::ptr(pPlayer) );
            }
        else
            return this->CSingleplayRules::DeadPlayerWeapons( boost::python::ptr(pPlayer) );
    }
    
    int default_DeadPlayerWeapons( ::CBasePlayer * pPlayer ) {
        return CSingleplayRules::DeadPlayerWeapons( boost::python::ptr(pPlayer) );
    }

    virtual void DeathNotice( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DeathNotice: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DeathNotice( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::DeathNotice( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            this->CSingleplayRules::DeathNotice( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    void default_DeathNotice( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        CSingleplayRules::DeathNotice( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual bool FAllowFlashlight(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FAllowFlashlight: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FAllowFlashlight(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FAllowFlashlight = this->get_override( "FAllowFlashlight" );
        if( func_FAllowFlashlight.ptr() != Py_None )
            try {
                return func_FAllowFlashlight(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FAllowFlashlight(  );
            }
        else
            return this->CSingleplayRules::FAllowFlashlight(  );
    }
    
    bool default_FAllowFlashlight(  ) {
        return CSingleplayRules::FAllowFlashlight( );
    }

    virtual bool FAllowNPCs(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FAllowNPCs: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FAllowNPCs(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FAllowNPCs = this->get_override( "FAllowNPCs" );
        if( func_FAllowNPCs.ptr() != Py_None )
            try {
                return func_FAllowNPCs(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FAllowNPCs(  );
            }
        else
            return this->CSingleplayRules::FAllowNPCs(  );
    }
    
    bool default_FAllowNPCs(  ) {
        return CSingleplayRules::FAllowNPCs( );
    }

    virtual bool FPlayerCanRespawn( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FPlayerCanRespawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FPlayerCanRespawn( boost::python::ptr(pPlayer) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FPlayerCanRespawn = this->get_override( "FPlayerCanRespawn" );
        if( func_FPlayerCanRespawn.ptr() != Py_None )
            try {
                return func_FPlayerCanRespawn( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FPlayerCanRespawn( boost::python::ptr(pPlayer) );
            }
        else
            return this->CSingleplayRules::FPlayerCanRespawn( boost::python::ptr(pPlayer) );
    }
    
    bool default_FPlayerCanRespawn( ::CBasePlayer * pPlayer ) {
        return CSingleplayRules::FPlayerCanRespawn( boost::python::ptr(pPlayer) );
    }

    virtual bool FShouldSwitchWeapon( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FShouldSwitchWeapon: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FShouldSwitchWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FShouldSwitchWeapon = this->get_override( "FShouldSwitchWeapon" );
        if( func_FShouldSwitchWeapon.ptr() != Py_None )
            try {
                return func_FShouldSwitchWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FShouldSwitchWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
            }
        else
            return this->CSingleplayRules::FShouldSwitchWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
    }
    
    bool default_FShouldSwitchWeapon( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        return CSingleplayRules::FShouldSwitchWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
    }

    virtual float FlHealthChargerRechargeTime(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlHealthChargerRechargeTime: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlHealthChargerRechargeTime(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlHealthChargerRechargeTime = this->get_override( "FlHealthChargerRechargeTime" );
        if( func_FlHealthChargerRechargeTime.ptr() != Py_None )
            try {
                return func_FlHealthChargerRechargeTime(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FlHealthChargerRechargeTime(  );
            }
        else
            return this->CSingleplayRules::FlHealthChargerRechargeTime(  );
    }
    
    float default_FlHealthChargerRechargeTime(  ) {
        return CSingleplayRules::FlHealthChargerRechargeTime( );
    }

    virtual float FlItemRespawnTime( ::CItem * pItem ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlItemRespawnTime: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlItemRespawnTime( boost::python::ptr(pItem) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlItemRespawnTime = this->get_override( "FlItemRespawnTime" );
        if( func_FlItemRespawnTime.ptr() != Py_None )
            try {
                return func_FlItemRespawnTime( boost::python::ptr(pItem) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FlItemRespawnTime( boost::python::ptr(pItem) );
            }
        else
            return this->CSingleplayRules::FlItemRespawnTime( boost::python::ptr(pItem) );
    }
    
    float default_FlItemRespawnTime( ::CItem * pItem ) {
        return CSingleplayRules::FlItemRespawnTime( boost::python::ptr(pItem) );
    }

    virtual float FlPlayerFallDamage( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlPlayerFallDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlPlayerFallDamage( boost::python::ptr(pPlayer) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlPlayerFallDamage = this->get_override( "FlPlayerFallDamage" );
        if( func_FlPlayerFallDamage.ptr() != Py_None )
            try {
                return func_FlPlayerFallDamage( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FlPlayerFallDamage( boost::python::ptr(pPlayer) );
            }
        else
            return this->CSingleplayRules::FlPlayerFallDamage( boost::python::ptr(pPlayer) );
    }
    
    float default_FlPlayerFallDamage( ::CBasePlayer * pPlayer ) {
        return CSingleplayRules::FlPlayerFallDamage( boost::python::ptr(pPlayer) );
    }

    virtual float FlPlayerSpawnTime( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlPlayerSpawnTime: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlPlayerSpawnTime( boost::python::ptr(pPlayer) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlPlayerSpawnTime = this->get_override( "FlPlayerSpawnTime" );
        if( func_FlPlayerSpawnTime.ptr() != Py_None )
            try {
                return func_FlPlayerSpawnTime( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FlPlayerSpawnTime( boost::python::ptr(pPlayer) );
            }
        else
            return this->CSingleplayRules::FlPlayerSpawnTime( boost::python::ptr(pPlayer) );
    }
    
    float default_FlPlayerSpawnTime( ::CBasePlayer * pPlayer ) {
        return CSingleplayRules::FlPlayerSpawnTime( boost::python::ptr(pPlayer) );
    }

    virtual float FlWeaponRespawnTime( ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlWeaponRespawnTime: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlWeaponRespawnTime( boost::python::ptr(pWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlWeaponRespawnTime = this->get_override( "FlWeaponRespawnTime" );
        if( func_FlWeaponRespawnTime.ptr() != Py_None )
            try {
                return func_FlWeaponRespawnTime( boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FlWeaponRespawnTime( boost::python::ptr(pWeapon) );
            }
        else
            return this->CSingleplayRules::FlWeaponRespawnTime( boost::python::ptr(pWeapon) );
    }
    
    float default_FlWeaponRespawnTime( ::CBaseCombatWeapon * pWeapon ) {
        return CSingleplayRules::FlWeaponRespawnTime( boost::python::ptr(pWeapon) );
    }

    virtual float FlWeaponTryRespawn( ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlWeaponTryRespawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlWeaponTryRespawn( boost::python::ptr(pWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlWeaponTryRespawn = this->get_override( "FlWeaponTryRespawn" );
        if( func_FlWeaponTryRespawn.ptr() != Py_None )
            try {
                return func_FlWeaponTryRespawn( boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::FlWeaponTryRespawn( boost::python::ptr(pWeapon) );
            }
        else
            return this->CSingleplayRules::FlWeaponTryRespawn( boost::python::ptr(pWeapon) );
    }
    
    float default_FlWeaponTryRespawn( ::CBaseCombatWeapon * pWeapon ) {
        return CSingleplayRules::FlWeaponTryRespawn( boost::python::ptr(pWeapon) );
    }

    virtual int GetAutoAimMode(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetAutoAimMode: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetAutoAimMode(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetAutoAimMode = this->get_override( "GetAutoAimMode" );
        if( func_GetAutoAimMode.ptr() != Py_None )
            try {
                return func_GetAutoAimMode(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::GetAutoAimMode(  );
            }
        else
            return this->CSingleplayRules::GetAutoAimMode(  );
    }
    
    int default_GetAutoAimMode(  ) {
        return CSingleplayRules::GetAutoAimMode( );
    }

    virtual ::CBaseCombatWeapon * GetNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetNextBestWeapon: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetNextBestWeapon = this->get_override( "GetNextBestWeapon" );
        if( func_GetNextBestWeapon.ptr() != Py_None )
            try {
                return func_GetNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::GetNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
            }
        else
            return this->CSingleplayRules::GetNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
    }
    
    ::CBaseCombatWeapon * default_GetNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        return CSingleplayRules::GetNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
    }

    virtual char const * GetTeamID( ::CBaseEntity * pEntity ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTeamID: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTeamID( boost::python::ptr(pEntity) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTeamID = this->get_override( "GetTeamID" );
        if( func_GetTeamID.ptr() != Py_None )
            try {
                return func_GetTeamID( boost::python::ptr(pEntity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::GetTeamID( boost::python::ptr(pEntity) );
            }
        else
            return this->CSingleplayRules::GetTeamID( boost::python::ptr(pEntity) );
    }
    
    char const * default_GetTeamID( ::CBaseEntity * pEntity ) {
        return CSingleplayRules::GetTeamID( boost::python::ptr(pEntity) );
    }

    virtual int IPointsForKill( ::CBasePlayer * pAttacker, ::CBasePlayer * pKilled ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IPointsForKill: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IPointsForKill( boost::python::ptr(pAttacker), boost::python::ptr(pKilled) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IPointsForKill = this->get_override( "IPointsForKill" );
        if( func_IPointsForKill.ptr() != Py_None )
            try {
                return func_IPointsForKill( boost::python::ptr(pAttacker), boost::python::ptr(pKilled) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::IPointsForKill( boost::python::ptr(pAttacker), boost::python::ptr(pKilled) );
            }
        else
            return this->CSingleplayRules::IPointsForKill( boost::python::ptr(pAttacker), boost::python::ptr(pKilled) );
    }
    
    int default_IPointsForKill( ::CBasePlayer * pAttacker, ::CBasePlayer * pKilled ) {
        return CSingleplayRules::IPointsForKill( boost::python::ptr(pAttacker), boost::python::ptr(pKilled) );
    }

    virtual void InitHUD( ::CBasePlayer * pl ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "InitHUD: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling InitHUD( boost::python::ptr(pl) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_InitHUD = this->get_override( "InitHUD" );
        if( func_InitHUD.ptr() != Py_None )
            try {
                func_InitHUD( boost::python::ptr(pl) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::InitHUD( boost::python::ptr(pl) );
            }
        else
            this->CSingleplayRules::InitHUD( boost::python::ptr(pl) );
    }
    
    void default_InitHUD( ::CBasePlayer * pl ) {
        CSingleplayRules::InitHUD( boost::python::ptr(pl) );
    }

    virtual bool IsAllowedToSpawn( ::CBaseEntity * pEntity ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsAllowedToSpawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsAllowedToSpawn( boost::python::ptr(pEntity) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsAllowedToSpawn = this->get_override( "IsAllowedToSpawn" );
        if( func_IsAllowedToSpawn.ptr() != Py_None )
            try {
                return func_IsAllowedToSpawn( boost::python::ptr(pEntity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::IsAllowedToSpawn( boost::python::ptr(pEntity) );
            }
        else
            return this->CSingleplayRules::IsAllowedToSpawn( boost::python::ptr(pEntity) );
    }
    
    bool default_IsAllowedToSpawn( ::CBaseEntity * pEntity ) {
        return CSingleplayRules::IsAllowedToSpawn( boost::python::ptr(pEntity) );
    }

    virtual bool IsCoOp(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsCoOp: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsCoOp(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsCoOp = this->get_override( "IsCoOp" );
        if( func_IsCoOp.ptr() != Py_None )
            try {
                return func_IsCoOp(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::IsCoOp(  );
            }
        else
            return this->CSingleplayRules::IsCoOp(  );
    }
    
    bool default_IsCoOp(  ) {
        return CSingleplayRules::IsCoOp( );
    }

    virtual bool IsDeathmatch(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsDeathmatch: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsDeathmatch(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsDeathmatch = this->get_override( "IsDeathmatch" );
        if( func_IsDeathmatch.ptr() != Py_None )
            try {
                return func_IsDeathmatch(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::IsDeathmatch(  );
            }
        else
            return this->CSingleplayRules::IsDeathmatch(  );
    }
    
    bool default_IsDeathmatch(  ) {
        return CSingleplayRules::IsDeathmatch( );
    }

    virtual bool IsMultiplayer(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsMultiplayer: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsMultiplayer(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsMultiplayer = this->get_override( "IsMultiplayer" );
        if( func_IsMultiplayer.ptr() != Py_None )
            try {
                return func_IsMultiplayer(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::IsMultiplayer(  );
            }
        else
            return this->CSingleplayRules::IsMultiplayer(  );
    }
    
    bool default_IsMultiplayer(  ) {
        return CSingleplayRules::IsMultiplayer( );
    }

    virtual int ItemShouldRespawn( ::CItem * pItem ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ItemShouldRespawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ItemShouldRespawn( boost::python::ptr(pItem) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ItemShouldRespawn = this->get_override( "ItemShouldRespawn" );
        if( func_ItemShouldRespawn.ptr() != Py_None )
            try {
                return func_ItemShouldRespawn( boost::python::ptr(pItem) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::ItemShouldRespawn( boost::python::ptr(pItem) );
            }
        else
            return this->CSingleplayRules::ItemShouldRespawn( boost::python::ptr(pItem) );
    }
    
    int default_ItemShouldRespawn( ::CItem * pItem ) {
        return CSingleplayRules::ItemShouldRespawn( boost::python::ptr(pItem) );
    }

    virtual bool PlayerCanHearChat( ::CBasePlayer * pListener, ::CBasePlayer * pSpeaker ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayerCanHearChat: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayerCanHearChat( boost::python::ptr(pListener), boost::python::ptr(pSpeaker) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayerCanHearChat = this->get_override( "PlayerCanHearChat" );
        if( func_PlayerCanHearChat.ptr() != Py_None )
            try {
                return func_PlayerCanHearChat( boost::python::ptr(pListener), boost::python::ptr(pSpeaker) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::PlayerCanHearChat( boost::python::ptr(pListener), boost::python::ptr(pSpeaker) );
            }
        else
            return this->CSingleplayRules::PlayerCanHearChat( boost::python::ptr(pListener), boost::python::ptr(pSpeaker) );
    }
    
    bool default_PlayerCanHearChat( ::CBasePlayer * pListener, ::CBasePlayer * pSpeaker ) {
        return CSingleplayRules::PlayerCanHearChat( boost::python::ptr(pListener), boost::python::ptr(pSpeaker) );
    }

    virtual void PlayerGotAmmo( ::CBaseCombatCharacter * pPlayer, char * szName, int iCount ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayerGotAmmo: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayerGotAmmo( boost::python::ptr(pPlayer), szName, iCount ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayerGotAmmo = this->get_override( "PlayerGotAmmo" );
        if( func_PlayerGotAmmo.ptr() != Py_None )
            try {
                func_PlayerGotAmmo( boost::python::ptr(pPlayer), szName, iCount );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::PlayerGotAmmo( boost::python::ptr(pPlayer), szName, iCount );
            }
        else
            this->CSingleplayRules::PlayerGotAmmo( boost::python::ptr(pPlayer), szName, iCount );
    }
    
    void default_PlayerGotAmmo( ::CBaseCombatCharacter * pPlayer, char * szName, int iCount ) {
        CSingleplayRules::PlayerGotAmmo( boost::python::ptr(pPlayer), szName, iCount );
    }

    virtual void PlayerGotItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayerGotItem: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayerGotItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayerGotItem = this->get_override( "PlayerGotItem" );
        if( func_PlayerGotItem.ptr() != Py_None )
            try {
                func_PlayerGotItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::PlayerGotItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
            }
        else
            this->CSingleplayRules::PlayerGotItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
    }
    
    void default_PlayerGotItem( ::CBasePlayer * pPlayer, ::CItem * pItem ) {
        CSingleplayRules::PlayerGotItem( boost::python::ptr(pPlayer), boost::python::ptr(pItem) );
    }

    virtual void PlayerKilled( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayerKilled: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayerKilled( boost::python::ptr(pVictim), boost::ref(info) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayerKilled = this->get_override( "PlayerKilled" );
        if( func_PlayerKilled.ptr() != Py_None )
            try {
                func_PlayerKilled( boost::python::ptr(pVictim), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::PlayerKilled( boost::python::ptr(pVictim), boost::ref(info) );
            }
        else
            this->CSingleplayRules::PlayerKilled( boost::python::ptr(pVictim), boost::ref(info) );
    }
    
    void default_PlayerKilled( ::CBasePlayer * pVictim, ::CTakeDamageInfo const & info ) {
        CSingleplayRules::PlayerKilled( boost::python::ptr(pVictim), boost::ref(info) );
    }

    virtual int PlayerRelationship( ::CBaseEntity * pPlayer, ::CBaseEntity * pTarget ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayerRelationship: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayerRelationship( boost::python::ptr(pPlayer), boost::python::ptr(pTarget) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayerRelationship = this->get_override( "PlayerRelationship" );
        if( func_PlayerRelationship.ptr() != Py_None )
            try {
                return func_PlayerRelationship( boost::python::ptr(pPlayer), boost::python::ptr(pTarget) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::PlayerRelationship( boost::python::ptr(pPlayer), boost::python::ptr(pTarget) );
            }
        else
            return this->CSingleplayRules::PlayerRelationship( boost::python::ptr(pPlayer), boost::python::ptr(pTarget) );
    }
    
    int default_PlayerRelationship( ::CBaseEntity * pPlayer, ::CBaseEntity * pTarget ) {
        return CSingleplayRules::PlayerRelationship( boost::python::ptr(pPlayer), boost::python::ptr(pTarget) );
    }

    virtual void PlayerSpawn( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayerSpawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayerSpawn( boost::python::ptr(pPlayer) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayerSpawn = this->get_override( "PlayerSpawn" );
        if( func_PlayerSpawn.ptr() != Py_None )
            try {
                func_PlayerSpawn( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::PlayerSpawn( boost::python::ptr(pPlayer) );
            }
        else
            this->CSingleplayRules::PlayerSpawn( boost::python::ptr(pPlayer) );
    }
    
    void default_PlayerSpawn( ::CBasePlayer * pPlayer ) {
        CSingleplayRules::PlayerSpawn( boost::python::ptr(pPlayer) );
    }

    virtual bool SwitchToNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SwitchToNextBestWeapon: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SwitchToNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SwitchToNextBestWeapon = this->get_override( "SwitchToNextBestWeapon" );
        if( func_SwitchToNextBestWeapon.ptr() != Py_None )
            try {
                return func_SwitchToNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::SwitchToNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
            }
        else
            return this->CSingleplayRules::SwitchToNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
    }
    
    bool default_SwitchToNextBestWeapon( ::CBaseCombatCharacter * pPlayer, ::CBaseCombatWeapon * pCurrentWeapon ) {
        return CSingleplayRules::SwitchToNextBestWeapon( boost::python::ptr(pPlayer), boost::python::ptr(pCurrentWeapon) );
    }

    virtual void Think(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Think: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Think(  ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Think = this->get_override( "Think" );
        if( func_Think.ptr() != Py_None )
            try {
                func_Think(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CSingleplayRules::Think(  );
            }
        else
            this->CSingleplayRules::Think(  );
    }
    
    void default_Think(  ) {
        CSingleplayRules::Think( );
    }

    virtual ::QAngle VecItemRespawnAngles( ::CItem * pItem ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VecItemRespawnAngles: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VecItemRespawnAngles( boost::python::ptr(pItem) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VecItemRespawnAngles = this->get_override( "VecItemRespawnAngles" );
        if( func_VecItemRespawnAngles.ptr() != Py_None )
            try {
                return func_VecItemRespawnAngles( boost::python::ptr(pItem) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::VecItemRespawnAngles( boost::python::ptr(pItem) );
            }
        else
            return this->CSingleplayRules::VecItemRespawnAngles( boost::python::ptr(pItem) );
    }
    
    ::QAngle default_VecItemRespawnAngles( ::CItem * pItem ) {
        return CSingleplayRules::VecItemRespawnAngles( boost::python::ptr(pItem) );
    }

    virtual ::Vector VecItemRespawnSpot( ::CItem * pItem ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VecItemRespawnSpot: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VecItemRespawnSpot( boost::python::ptr(pItem) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VecItemRespawnSpot = this->get_override( "VecItemRespawnSpot" );
        if( func_VecItemRespawnSpot.ptr() != Py_None )
            try {
                return func_VecItemRespawnSpot( boost::python::ptr(pItem) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::VecItemRespawnSpot( boost::python::ptr(pItem) );
            }
        else
            return this->CSingleplayRules::VecItemRespawnSpot( boost::python::ptr(pItem) );
    }
    
    ::Vector default_VecItemRespawnSpot( ::CItem * pItem ) {
        return CSingleplayRules::VecItemRespawnSpot( boost::python::ptr(pItem) );
    }

    virtual ::Vector VecWeaponRespawnSpot( ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "VecWeaponRespawnSpot: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling VecWeaponRespawnSpot( boost::python::ptr(pWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_VecWeaponRespawnSpot = this->get_override( "VecWeaponRespawnSpot" );
        if( func_VecWeaponRespawnSpot.ptr() != Py_None )
            try {
                return func_VecWeaponRespawnSpot( boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::VecWeaponRespawnSpot( boost::python::ptr(pWeapon) );
            }
        else
            return this->CSingleplayRules::VecWeaponRespawnSpot( boost::python::ptr(pWeapon) );
    }
    
    ::Vector default_VecWeaponRespawnSpot( ::CBaseCombatWeapon * pWeapon ) {
        return CSingleplayRules::VecWeaponRespawnSpot( boost::python::ptr(pWeapon) );
    }

    virtual int WeaponShouldRespawn( ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "WeaponShouldRespawn: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling WeaponShouldRespawn( boost::python::ptr(pWeapon) ) of Class: CSingleplayRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_WeaponShouldRespawn = this->get_override( "WeaponShouldRespawn" );
        if( func_WeaponShouldRespawn.ptr() != Py_None )
            try {
                return func_WeaponShouldRespawn( boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CSingleplayRules::WeaponShouldRespawn( boost::python::ptr(pWeapon) );
            }
        else
            return this->CSingleplayRules::WeaponShouldRespawn( boost::python::ptr(pWeapon) );
    }
    
    int default_WeaponShouldRespawn( ::CBaseCombatWeapon * pWeapon ) {
        return CSingleplayRules::WeaponShouldRespawn( boost::python::ptr(pWeapon) );
    }

    virtual char const * AIClassText( int classType ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "AIClassText: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling AIClassText( classType ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_AIClassText = this->get_override( "AIClassText" );
        if( func_AIClassText.ptr() != Py_None )
            try {
                return func_AIClassText( classType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::AIClassText( classType );
            }
        else
            return this->CGameRules::AIClassText( classType );
    }
    
    char const * default_AIClassText( int classType ) {
        return CGameRules::AIClassText( classType );
    }

    virtual float AdjustPlayerDamageInflicted( float damage ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "AdjustPlayerDamageInflicted: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling AdjustPlayerDamageInflicted( damage ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_AdjustPlayerDamageInflicted = this->get_override( "AdjustPlayerDamageInflicted" );
        if( func_AdjustPlayerDamageInflicted.ptr() != Py_None )
            try {
                return func_AdjustPlayerDamageInflicted( damage );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::AdjustPlayerDamageInflicted( damage );
            }
        else
            return this->CGameRules::AdjustPlayerDamageInflicted( damage );
    }
    
    float default_AdjustPlayerDamageInflicted( float damage ) {
        return CGameRules::AdjustPlayerDamageInflicted( damage );
    }

    virtual void AdjustPlayerDamageTaken( ::CTakeDamageInfo * pInfo ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "AdjustPlayerDamageTaken: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling AdjustPlayerDamageTaken( boost::python::ptr(pInfo) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_AdjustPlayerDamageTaken = this->get_override( "AdjustPlayerDamageTaken" );
        if( func_AdjustPlayerDamageTaken.ptr() != Py_None )
            try {
                func_AdjustPlayerDamageTaken( boost::python::ptr(pInfo) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::AdjustPlayerDamageTaken( boost::python::ptr(pInfo) );
            }
        else
            this->CGameRules::AdjustPlayerDamageTaken( boost::python::ptr(pInfo) );
    }
    
    void default_AdjustPlayerDamageTaken( ::CTakeDamageInfo * pInfo ) {
        CGameRules::AdjustPlayerDamageTaken( boost::python::ptr(pInfo) );
    }

    virtual bool AllowThirdPersonCamera(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "AllowThirdPersonCamera: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling AllowThirdPersonCamera(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_AllowThirdPersonCamera = this->get_override( "AllowThirdPersonCamera" );
        if( func_AllowThirdPersonCamera.ptr() != Py_None )
            try {
                return func_AllowThirdPersonCamera(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::AllowThirdPersonCamera(  );
            }
        else
            return this->CGameRules::AllowThirdPersonCamera(  );
    }
    
    bool default_AllowThirdPersonCamera(  ) {
        return CGameRules::AllowThirdPersonCamera( );
    }

    virtual bool CanEntityBeUsePushed( ::CBaseEntity * pEnt ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanEntityBeUsePushed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanEntityBeUsePushed( boost::python::ptr(pEnt) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanEntityBeUsePushed = this->get_override( "CanEntityBeUsePushed" );
        if( func_CanEntityBeUsePushed.ptr() != Py_None )
            try {
                return func_CanEntityBeUsePushed( boost::python::ptr(pEnt) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanEntityBeUsePushed( boost::python::ptr(pEnt) );
            }
        else
            return this->CGameRules::CanEntityBeUsePushed( boost::python::ptr(pEnt) );
    }
    
    bool default_CanEntityBeUsePushed( ::CBaseEntity * pEnt ) {
        return CGameRules::CanEntityBeUsePushed( boost::python::ptr(pEnt) );
    }

    virtual bool CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, int iAmmoIndex ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanHaveAmmo: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanHaveAmmo( boost::python::ptr(pPlayer), iAmmoIndex ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanHaveAmmo = this->get_override( "CanHaveAmmo" );
        if( func_CanHaveAmmo.ptr() != Py_None )
            try {
                return func_CanHaveAmmo( boost::python::ptr(pPlayer), iAmmoIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanHaveAmmo( boost::python::ptr(pPlayer), iAmmoIndex );
            }
        else
            return this->CGameRules::CanHaveAmmo( boost::python::ptr(pPlayer), iAmmoIndex );
    }
    
    bool default_CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, int iAmmoIndex ) {
        return CGameRules::CanHaveAmmo( boost::python::ptr(pPlayer), iAmmoIndex );
    }

    virtual bool CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, char const * szName ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanHaveAmmo: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanHaveAmmo( boost::python::ptr(pPlayer), szName ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanHaveAmmo = this->get_override( "CanHaveAmmo" );
        if( func_CanHaveAmmo.ptr() != Py_None )
            try {
                return func_CanHaveAmmo( boost::python::ptr(pPlayer), szName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanHaveAmmo( boost::python::ptr(pPlayer), szName );
            }
        else
            return this->CGameRules::CanHaveAmmo( boost::python::ptr(pPlayer), szName );
    }
    
    bool default_CanHaveAmmo( ::CBaseCombatCharacter * pPlayer, char const * szName ) {
        return CGameRules::CanHaveAmmo( boost::python::ptr(pPlayer), szName );
    }

    virtual bool CanHavePlayerItem( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CanHavePlayerItem: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CanHavePlayerItem( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CanHavePlayerItem = this->get_override( "CanHavePlayerItem" );
        if( func_CanHavePlayerItem.ptr() != Py_None )
            try {
                return func_CanHavePlayerItem( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::CanHavePlayerItem( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
            }
        else
            return this->CGameRules::CanHavePlayerItem( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
    }
    
    bool default_CanHavePlayerItem( ::CBasePlayer * pPlayer, ::CBaseCombatWeapon * pWeapon ) {
        return CGameRules::CanHavePlayerItem( boost::python::ptr(pPlayer), boost::python::ptr(pWeapon) );
    }

    virtual void ChangePlayerTeam( ::CBasePlayer * pPlayer, char const * pTeamName, bool bKill, bool bGib ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ChangePlayerTeam: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ChangePlayerTeam( boost::python::ptr(pPlayer), pTeamName, bKill, bGib ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ChangePlayerTeam = this->get_override( "ChangePlayerTeam" );
        if( func_ChangePlayerTeam.ptr() != Py_None )
            try {
                func_ChangePlayerTeam( boost::python::ptr(pPlayer), pTeamName, bKill, bGib );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ChangePlayerTeam( boost::python::ptr(pPlayer), pTeamName, bKill, bGib );
            }
        else
            this->CGameRules::ChangePlayerTeam( boost::python::ptr(pPlayer), pTeamName, bKill, bGib );
    }
    
    void default_ChangePlayerTeam( ::CBasePlayer * pPlayer, char const * pTeamName, bool bKill, bool bGib ) {
        CGameRules::ChangePlayerTeam( boost::python::ptr(pPlayer), pTeamName, bKill, bGib );
    }

    virtual void CheckChatText( ::CBasePlayer * pPlayer, char * pText ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CheckChatText: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CheckChatText( boost::python::ptr(pPlayer), pText ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CheckChatText = this->get_override( "CheckChatText" );
        if( func_CheckChatText.ptr() != Py_None )
            try {
                func_CheckChatText( boost::python::ptr(pPlayer), pText );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::CheckChatText( boost::python::ptr(pPlayer), pText );
            }
        else
            this->CGameRules::CheckChatText( boost::python::ptr(pPlayer), pText );
    }
    
    void default_CheckChatText( ::CBasePlayer * pPlayer, char * pText ) {
        CGameRules::CheckChatText( boost::python::ptr(pPlayer), pText );
    }

    virtual void CheckHaptics( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CheckHaptics: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CheckHaptics( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CheckHaptics = this->get_override( "CheckHaptics" );
        if( func_CheckHaptics.ptr() != Py_None )
            try {
                func_CheckHaptics( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::CheckHaptics( boost::python::ptr(pPlayer) );
            }
        else
            this->CGameRules::CheckHaptics( boost::python::ptr(pPlayer) );
    }
    
    void default_CheckHaptics( ::CBasePlayer * pPlayer ) {
        CGameRules::CheckHaptics( boost::python::ptr(pPlayer) );
    }

    virtual bool ClientCommand( ::CBaseEntity * pEdict, ::CCommand const & args ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientCommand: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientCommand( boost::python::ptr(pEdict), boost::ref(args) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientCommand = this->get_override( "ClientCommand" );
        if( func_ClientCommand.ptr() != Py_None )
            try {
                return func_ClientCommand( boost::python::ptr(pEdict), boost::ref(args) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ClientCommand( boost::python::ptr(pEdict), boost::ref(args) );
            }
        else
            return this->CGameRules::ClientCommand( boost::python::ptr(pEdict), boost::ref(args) );
    }
    
    bool default_ClientCommand( ::CBaseEntity * pEdict, ::CCommand const & args ) {
        return CGameRules::ClientCommand( boost::python::ptr(pEdict), boost::ref(args) );
    }

    virtual void ClientCommandKeyValues( ::edict_t * pEntity, ::KeyValues * pKeyValues ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientCommandKeyValues: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientCommandKeyValues = this->get_override( "ClientCommandKeyValues" );
        if( func_ClientCommandKeyValues.ptr() != Py_None )
            try {
                func_ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) );
            }
        else
            this->CGameRules::ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) );
    }
    
    void default_ClientCommandKeyValues( ::edict_t * pEntity, ::KeyValues * pKeyValues ) {
        CGameRules::ClientCommandKeyValues( boost::python::ptr(pEntity), boost::python::ptr(pKeyValues) );
    }

    virtual void ClientSettingsChanged( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientSettingsChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientSettingsChanged( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientSettingsChanged = this->get_override( "ClientSettingsChanged" );
        if( func_ClientSettingsChanged.ptr() != Py_None )
            try {
                func_ClientSettingsChanged( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ClientSettingsChanged( boost::python::ptr(pPlayer) );
            }
        else
            this->CGameRules::ClientSettingsChanged( boost::python::ptr(pPlayer) );
    }
    
    void default_ClientSettingsChanged( ::CBasePlayer * pPlayer ) {
        CGameRules::ClientSettingsChanged( boost::python::ptr(pPlayer) );
    }

    virtual void ClientSpawned( ::edict_t * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ClientSpawned: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ClientSpawned( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ClientSpawned = this->get_override( "ClientSpawned" );
        if( func_ClientSpawned.ptr() != Py_None )
            try {
                func_ClientSpawned( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ClientSpawned( boost::python::ptr(pPlayer) );
            }
        else
            this->CGameRules::ClientSpawned( boost::python::ptr(pPlayer) );
    }
    
    void default_ClientSpawned( ::edict_t * pPlayer ) {
        CGameRules::ClientSpawned( boost::python::ptr(pPlayer) );
    }

    virtual void CreateCustomNetworkStringTables(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateCustomNetworkStringTables: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateCustomNetworkStringTables(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateCustomNetworkStringTables = this->get_override( "CreateCustomNetworkStringTables" );
        if( func_CreateCustomNetworkStringTables.ptr() != Py_None )
            try {
                func_CreateCustomNetworkStringTables(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::CreateCustomNetworkStringTables(  );
            }
        else
            this->CGameRules::CreateCustomNetworkStringTables(  );
    }
    
    void default_CreateCustomNetworkStringTables(  ) {
        CGameRules::CreateCustomNetworkStringTables( );
    }

    virtual void CreateStandardEntities(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "CreateStandardEntities: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling CreateStandardEntities(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_CreateStandardEntities = this->get_override( "CreateStandardEntities" );
        if( func_CreateStandardEntities.ptr() != Py_None )
            try {
                func_CreateStandardEntities(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::CreateStandardEntities(  );
            }
        else
            this->CGameRules::CreateStandardEntities(  );
    }
    
    void default_CreateStandardEntities(  ) {
        CGameRules::CreateStandardEntities( );
    }

    virtual int DefaultFOV(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "DefaultFOV: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling DefaultFOV(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_DefaultFOV = this->get_override( "DefaultFOV" );
        if( func_DefaultFOV.ptr() != Py_None )
            try {
                return func_DefaultFOV(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::DefaultFOV(  );
            }
        else
            return this->CGameRules::DefaultFOV(  );
    }
    
    int default_DefaultFOV(  ) {
        return CGameRules::DefaultFOV( );
    }

    virtual void EndGameFrame(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndGameFrame: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndGameFrame(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndGameFrame = this->get_override( "EndGameFrame" );
        if( func_EndGameFrame.ptr() != Py_None )
            try {
                func_EndGameFrame(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::EndGameFrame(  );
            }
        else
            this->CGameRules::EndGameFrame(  );
    }
    
    void default_EndGameFrame(  ) {
        CGameRules::EndGameFrame( );
    }

    virtual void EndMultiplayerGame(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "EndMultiplayerGame: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling EndMultiplayerGame(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_EndMultiplayerGame = this->get_override( "EndMultiplayerGame" );
        if( func_EndMultiplayerGame.ptr() != Py_None )
            try {
                func_EndMultiplayerGame(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::EndMultiplayerGame(  );
            }
        else
            this->CGameRules::EndMultiplayerGame(  );
    }
    
    void default_EndMultiplayerGame(  ) {
        CGameRules::EndMultiplayerGame( );
    }

    virtual bool FPlayerCanTakeDamage( ::CBasePlayer * pPlayer, ::CBaseEntity * pAttacker ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FPlayerCanTakeDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FPlayerCanTakeDamage( boost::python::ptr(pPlayer), boost::python::ptr(pAttacker) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FPlayerCanTakeDamage = this->get_override( "FPlayerCanTakeDamage" );
        if( func_FPlayerCanTakeDamage.ptr() != Py_None )
            try {
                return func_FPlayerCanTakeDamage( boost::python::ptr(pPlayer), boost::python::ptr(pAttacker) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::FPlayerCanTakeDamage( boost::python::ptr(pPlayer), boost::python::ptr(pAttacker) );
            }
        else
            return this->CGameRules::FPlayerCanTakeDamage( boost::python::ptr(pPlayer), boost::python::ptr(pAttacker) );
    }
    
    bool default_FPlayerCanTakeDamage( ::CBasePlayer * pPlayer, ::CBaseEntity * pAttacker ) {
        return CGameRules::FPlayerCanTakeDamage( boost::python::ptr(pPlayer), boost::python::ptr(pAttacker) );
    }

    virtual float FlHEVChargerRechargeTime(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlHEVChargerRechargeTime: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlHEVChargerRechargeTime(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlHEVChargerRechargeTime = this->get_override( "FlHEVChargerRechargeTime" );
        if( func_FlHEVChargerRechargeTime.ptr() != Py_None )
            try {
                return func_FlHEVChargerRechargeTime(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::FlHEVChargerRechargeTime(  );
            }
        else
            return this->CGameRules::FlHEVChargerRechargeTime(  );
    }
    
    float default_FlHEVChargerRechargeTime(  ) {
        return CGameRules::FlHEVChargerRechargeTime( );
    }

    virtual bool FlPlayerFallDeathDoesScreenFade( ::CBasePlayer * pl ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FlPlayerFallDeathDoesScreenFade: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FlPlayerFallDeathDoesScreenFade( boost::python::ptr(pl) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FlPlayerFallDeathDoesScreenFade = this->get_override( "FlPlayerFallDeathDoesScreenFade" );
        if( func_FlPlayerFallDeathDoesScreenFade.ptr() != Py_None )
            try {
                return func_FlPlayerFallDeathDoesScreenFade( boost::python::ptr(pl) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::FlPlayerFallDeathDoesScreenFade( boost::python::ptr(pl) );
            }
        else
            return this->CGameRules::FlPlayerFallDeathDoesScreenFade( boost::python::ptr(pl) );
    }
    
    bool default_FlPlayerFallDeathDoesScreenFade( ::CBasePlayer * pl ) {
        return CGameRules::FlPlayerFallDeathDoesScreenFade( boost::python::ptr(pl) );
    }

    virtual void FrameUpdatePostEntityThink(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "FrameUpdatePostEntityThink: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling FrameUpdatePostEntityThink(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_FrameUpdatePostEntityThink = this->get_override( "FrameUpdatePostEntityThink" );
        if( func_FrameUpdatePostEntityThink.ptr() != Py_None )
            try {
                func_FrameUpdatePostEntityThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::FrameUpdatePostEntityThink(  );
            }
        else
            this->CGameRules::FrameUpdatePostEntityThink(  );
    }
    
    void default_FrameUpdatePostEntityThink(  ) {
        CGameRules::FrameUpdatePostEntityThink( );
    }

    virtual float GetAmmoQuantityScale( int iAmmoIndex ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetAmmoQuantityScale: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetAmmoQuantityScale( iAmmoIndex ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetAmmoQuantityScale = this->get_override( "GetAmmoQuantityScale" );
        if( func_GetAmmoQuantityScale.ptr() != Py_None )
            try {
                return func_GetAmmoQuantityScale( iAmmoIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetAmmoQuantityScale( iAmmoIndex );
            }
        else
            return this->CGameRules::GetAmmoQuantityScale( iAmmoIndex );
    }
    
    float default_GetAmmoQuantityScale( int iAmmoIndex ) {
        return CGameRules::GetAmmoQuantityScale( iAmmoIndex );
    }

    virtual float GetAutoAimScale( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetAutoAimScale: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetAutoAimScale( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetAutoAimScale = this->get_override( "GetAutoAimScale" );
        if( func_GetAutoAimScale.ptr() != Py_None )
            try {
                return func_GetAutoAimScale( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetAutoAimScale( boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::GetAutoAimScale( boost::python::ptr(pPlayer) );
    }
    
    float default_GetAutoAimScale( ::CBasePlayer * pPlayer ) {
        return CGameRules::GetAutoAimScale( boost::python::ptr(pPlayer) );
    }

    virtual char const * GetChatFormat( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetChatFormat: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetChatFormat( bTeamOnly, boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetChatFormat = this->get_override( "GetChatFormat" );
        if( func_GetChatFormat.ptr() != Py_None )
            try {
                return func_GetChatFormat( bTeamOnly, boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetChatFormat( bTeamOnly, boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::GetChatFormat( bTeamOnly, boost::python::ptr(pPlayer) );
    }
    
    char const * default_GetChatFormat( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        return CGameRules::GetChatFormat( bTeamOnly, boost::python::ptr(pPlayer) );
    }

    virtual char const * GetChatLocation( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetChatLocation: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetChatLocation( bTeamOnly, boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetChatLocation = this->get_override( "GetChatLocation" );
        if( func_GetChatLocation.ptr() != Py_None )
            try {
                return func_GetChatLocation( bTeamOnly, boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetChatLocation( bTeamOnly, boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::GetChatLocation( bTeamOnly, boost::python::ptr(pPlayer) );
    }
    
    char const * default_GetChatLocation( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        return CGameRules::GetChatLocation( bTeamOnly, boost::python::ptr(pPlayer) );
    }

    virtual char const * GetChatPrefix( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetChatPrefix: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetChatPrefix( bTeamOnly, boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetChatPrefix = this->get_override( "GetChatPrefix" );
        if( func_GetChatPrefix.ptr() != Py_None )
            try {
                return func_GetChatPrefix( bTeamOnly, boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetChatPrefix( bTeamOnly, boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::GetChatPrefix( bTeamOnly, boost::python::ptr(pPlayer) );
    }
    
    char const * default_GetChatPrefix( bool bTeamOnly, ::CBasePlayer * pPlayer ) {
        return CGameRules::GetChatPrefix( bTeamOnly, boost::python::ptr(pPlayer) );
    }

    virtual char const * GetDamageCustomString( ::CTakeDamageInfo const & info ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetDamageCustomString: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetDamageCustomString( boost::ref(info) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetDamageCustomString = this->get_override( "GetDamageCustomString" );
        if( func_GetDamageCustomString.ptr() != Py_None )
            try {
                return func_GetDamageCustomString( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetDamageCustomString( boost::ref(info) );
            }
        else
            return this->CGameRules::GetDamageCustomString( boost::ref(info) );
    }
    
    char const * default_GetDamageCustomString( ::CTakeDamageInfo const & info ) {
        return CGameRules::GetDamageCustomString( boost::ref(info) );
    }

    virtual float GetDamageMultiplier(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetDamageMultiplier: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetDamageMultiplier(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetDamageMultiplier = this->get_override( "GetDamageMultiplier" );
        if( func_GetDamageMultiplier.ptr() != Py_None )
            try {
                return func_GetDamageMultiplier(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetDamageMultiplier(  );
            }
        else
            return this->CGameRules::GetDamageMultiplier(  );
    }
    
    float default_GetDamageMultiplier(  ) {
        return CGameRules::GetDamageMultiplier( );
    }

    virtual char const * GetGameDescription(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetGameDescription: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetGameDescription(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetGameDescription = this->get_override( "GetGameDescription" );
        if( func_GetGameDescription.ptr() != Py_None )
            try {
                return func_GetGameDescription(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetGameDescription(  );
            }
        else
            return this->CGameRules::GetGameDescription(  );
    }
    
    char const * default_GetGameDescription(  ) {
        return CGameRules::GetGameDescription( );
    }

    virtual int GetGameType(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetGameType: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetGameType(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetGameType = this->get_override( "GetGameType" );
        if( func_GetGameType.ptr() != Py_None )
            try {
                return func_GetGameType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetGameType(  );
            }
        else
            return this->CGameRules::GetGameType(  );
    }
    
    int default_GetGameType(  ) {
        return CGameRules::GetGameType( );
    }

    virtual char const * GetGameTypeName(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetGameTypeName: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetGameTypeName(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetGameTypeName = this->get_override( "GetGameTypeName" );
        if( func_GetGameTypeName.ptr() != Py_None )
            try {
                return func_GetGameTypeName(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetGameTypeName(  );
            }
        else
            return this->CGameRules::GetGameTypeName(  );
    }
    
    char const * default_GetGameTypeName(  ) {
        return CGameRules::GetGameTypeName( );
    }

    virtual char const * GetIndexedTeamName( int teamIndex ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetIndexedTeamName: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetIndexedTeamName( teamIndex ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetIndexedTeamName = this->get_override( "GetIndexedTeamName" );
        if( func_GetIndexedTeamName.ptr() != Py_None )
            try {
                return func_GetIndexedTeamName( teamIndex );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetIndexedTeamName( teamIndex );
            }
        else
            return this->CGameRules::GetIndexedTeamName( teamIndex );
    }
    
    char const * default_GetIndexedTeamName( int teamIndex ) {
        return CGameRules::GetIndexedTeamName( teamIndex );
    }

    virtual ::CBaseEntity * GetPlayerSpawnSpot( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetPlayerSpawnSpot: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetPlayerSpawnSpot( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetPlayerSpawnSpot = this->get_override( "GetPlayerSpawnSpot" );
        if( func_GetPlayerSpawnSpot.ptr() != Py_None )
            try {
                return func_GetPlayerSpawnSpot( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetPlayerSpawnSpot( boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::GetPlayerSpawnSpot( boost::python::ptr(pPlayer) );
    }
    
    ::CBaseEntity * default_GetPlayerSpawnSpot( ::CBasePlayer * pPlayer ) {
        return CGameRules::GetPlayerSpawnSpot( boost::python::ptr(pPlayer) );
    }

    virtual int GetSkillLevel(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetSkillLevel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetSkillLevel(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetSkillLevel = this->get_override( "GetSkillLevel" );
        if( func_GetSkillLevel.ptr() != Py_None )
            try {
                return func_GetSkillLevel(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetSkillLevel(  );
            }
        else
            return this->CGameRules::GetSkillLevel(  );
    }
    
    int default_GetSkillLevel(  ) {
        return CGameRules::GetSkillLevel( );
    }

    virtual void GetTaggedConVarList( ::KeyValues * pCvarTagList ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTaggedConVarList: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTaggedConVarList( boost::python::ptr(pCvarTagList) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTaggedConVarList = this->get_override( "GetTaggedConVarList" );
        if( func_GetTaggedConVarList.ptr() != Py_None )
            try {
                func_GetTaggedConVarList( boost::python::ptr(pCvarTagList) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::GetTaggedConVarList( boost::python::ptr(pCvarTagList) );
            }
        else
            this->CGameRules::GetTaggedConVarList( boost::python::ptr(pCvarTagList) );
    }
    
    void default_GetTaggedConVarList( ::KeyValues * pCvarTagList ) {
        CGameRules::GetTaggedConVarList( boost::python::ptr(pCvarTagList) );
    }

    virtual int GetTeamIndex( char const * pTeamName ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "GetTeamIndex: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling GetTeamIndex( pTeamName ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_GetTeamIndex = this->get_override( "GetTeamIndex" );
        if( func_GetTeamIndex.ptr() != Py_None )
            try {
                return func_GetTeamIndex( pTeamName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::GetTeamIndex( pTeamName );
            }
        else
            return this->CGameRules::GetTeamIndex( pTeamName );
    }
    
    int default_GetTeamIndex( char const * pTeamName ) {
        return CGameRules::GetTeamIndex( pTeamName );
    }

    virtual bool InRoundRestart(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "InRoundRestart: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling InRoundRestart(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_InRoundRestart = this->get_override( "InRoundRestart" );
        if( func_InRoundRestart.ptr() != Py_None )
            try {
                return func_InRoundRestart(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::InRoundRestart(  );
            }
        else
            return this->CGameRules::InRoundRestart(  );
    }
    
    bool default_InRoundRestart(  ) {
        return CGameRules::InRoundRestart( );
    }

    virtual void InitDefaultAIRelationships(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "InitDefaultAIRelationships: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling InitDefaultAIRelationships(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_InitDefaultAIRelationships = this->get_override( "InitDefaultAIRelationships" );
        if( func_InitDefaultAIRelationships.ptr() != Py_None )
            try {
                func_InitDefaultAIRelationships(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::InitDefaultAIRelationships(  );
            }
        else
            this->CGameRules::InitDefaultAIRelationships(  );
    }
    
    void default_InitDefaultAIRelationships(  ) {
        CGameRules::InitDefaultAIRelationships( );
    }

    virtual void InitGamerules(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "InitGamerules: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling InitGamerules(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_InitGamerules = this->get_override( "InitGamerules" );
        if( func_InitGamerules.ptr() != Py_None )
            try {
                func_InitGamerules(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::InitGamerules(  );
            }
        else
            this->CGameRules::InitGamerules(  );
    }
    
    void default_InitGamerules(  ) {
        CGameRules::InitGamerules( );
    }

    virtual bool IsConnectedUserInfoChangeAllowed( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsConnectedUserInfoChangeAllowed: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsConnectedUserInfoChangeAllowed( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsConnectedUserInfoChangeAllowed = this->get_override( "IsConnectedUserInfoChangeAllowed" );
        if( func_IsConnectedUserInfoChangeAllowed.ptr() != Py_None )
            try {
                return func_IsConnectedUserInfoChangeAllowed( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsConnectedUserInfoChangeAllowed( boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::IsConnectedUserInfoChangeAllowed( boost::python::ptr(pPlayer) );
    }
    
    bool default_IsConnectedUserInfoChangeAllowed( ::CBasePlayer * pPlayer ) {
        return CGameRules::IsConnectedUserInfoChangeAllowed( boost::python::ptr(pPlayer) );
    }

    virtual bool IsHolidayActive( int eHoliday ) const  {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsHolidayActive: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsHolidayActive( eHoliday ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsHolidayActive = this->get_override( "IsHolidayActive" );
        if( func_IsHolidayActive.ptr() != Py_None )
            try {
                return func_IsHolidayActive( eHoliday );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsHolidayActive( eHoliday );
            }
        else
            return this->CGameRules::IsHolidayActive( eHoliday );
    }
    
    bool default_IsHolidayActive( int eHoliday ) const  {
        return CGameRules::IsHolidayActive( eHoliday );
    }

    virtual bool IsSkillLevel( int iLevel ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsSkillLevel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsSkillLevel( iLevel ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsSkillLevel = this->get_override( "IsSkillLevel" );
        if( func_IsSkillLevel.ptr() != Py_None )
            try {
                return func_IsSkillLevel( iLevel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsSkillLevel( iLevel );
            }
        else
            return this->CGameRules::IsSkillLevel( iLevel );
    }
    
    bool default_IsSkillLevel( int iLevel ) {
        return CGameRules::IsSkillLevel( iLevel );
    }

    virtual bool IsSpawnPointValid( ::CBaseEntity * pSpot, ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsSpawnPointValid: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsSpawnPointValid( boost::python::ptr(pSpot), boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsSpawnPointValid = this->get_override( "IsSpawnPointValid" );
        if( func_IsSpawnPointValid.ptr() != Py_None )
            try {
                return func_IsSpawnPointValid( boost::python::ptr(pSpot), boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsSpawnPointValid( boost::python::ptr(pSpot), boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::IsSpawnPointValid( boost::python::ptr(pSpot), boost::python::ptr(pPlayer) );
    }
    
    bool default_IsSpawnPointValid( ::CBaseEntity * pSpot, ::CBasePlayer * pPlayer ) {
        return CGameRules::IsSpawnPointValid( boost::python::ptr(pSpot), boost::python::ptr(pPlayer) );
    }

    virtual bool IsTeamplay(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsTeamplay: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsTeamplay(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsTeamplay = this->get_override( "IsTeamplay" );
        if( func_IsTeamplay.ptr() != Py_None )
            try {
                return func_IsTeamplay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsTeamplay(  );
            }
        else
            return this->CGameRules::IsTeamplay(  );
    }
    
    bool default_IsTeamplay(  ) {
        return CGameRules::IsTeamplay( );
    }

    virtual bool IsValidTeam( char const * pTeamName ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "IsValidTeam: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling IsValidTeam( pTeamName ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_IsValidTeam = this->get_override( "IsValidTeam" );
        if( func_IsValidTeam.ptr() != Py_None )
            try {
                return func_IsValidTeam( pTeamName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::IsValidTeam( pTeamName );
            }
        else
            return this->CGameRules::IsValidTeam( pTeamName );
    }
    
    bool default_IsValidTeam( char const * pTeamName ) {
        return CGameRules::IsValidTeam( pTeamName );
    }

    virtual void LevelShutdown(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "LevelShutdown: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling LevelShutdown(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_LevelShutdown = this->get_override( "LevelShutdown" );
        if( func_LevelShutdown.ptr() != Py_None )
            try {
                func_LevelShutdown(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::LevelShutdown(  );
            }
        else
            this->CGameRules::LevelShutdown(  );
    }
    
    void default_LevelShutdown(  ) {
        CGameRules::LevelShutdown( );
    }

    virtual void MarkAchievement( ::IRecipientFilter & filter, char const * pchAchievementName ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "MarkAchievement: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling MarkAchievement( boost::ref(filter), pchAchievementName ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_MarkAchievement = this->get_override( "MarkAchievement" );
        if( func_MarkAchievement.ptr() != Py_None )
            try {
                func_MarkAchievement( boost::ref(filter), pchAchievementName );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::MarkAchievement( boost::ref(filter), pchAchievementName );
            }
        else
            this->CGameRules::MarkAchievement( boost::ref(filter), pchAchievementName );
    }
    
    void default_MarkAchievement( ::IRecipientFilter & filter, char const * pchAchievementName ) {
        CGameRules::MarkAchievement( boost::ref(filter), pchAchievementName );
    }

    virtual char const * Name(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Name: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Name(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Name = this->get_override( "Name" );
        if( func_Name.ptr() != Py_None )
            try {
                return func_Name(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::Name(  );
            }
        else
            return this->CGameRules::Name(  );
    }
    
    char const * default_Name(  ) {
        return CGameRules::Name( );
    }

    virtual void OnFileReceived( char const * fileName, unsigned int transferID ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnFileReceived: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnFileReceived( fileName, transferID ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnFileReceived = this->get_override( "OnFileReceived" );
        if( func_OnFileReceived.ptr() != Py_None )
            try {
                func_OnFileReceived( fileName, transferID );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::OnFileReceived( fileName, transferID );
            }
        else
            this->CGameRules::OnFileReceived( fileName, transferID );
    }
    
    void default_OnFileReceived( char const * fileName, unsigned int transferID ) {
        CGameRules::OnFileReceived( fileName, transferID );
    }

    virtual void OnNavMeshLoad(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnNavMeshLoad: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnNavMeshLoad(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnNavMeshLoad = this->get_override( "OnNavMeshLoad" );
        if( func_OnNavMeshLoad.ptr() != Py_None )
            try {
                func_OnNavMeshLoad(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::OnNavMeshLoad(  );
            }
        else
            this->CGameRules::OnNavMeshLoad(  );
    }
    
    void default_OnNavMeshLoad(  ) {
        CGameRules::OnNavMeshLoad( );
    }

    virtual void OnSkillLevelChanged( int iNewLevel ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "OnSkillLevelChanged: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling OnSkillLevelChanged( iNewLevel ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_OnSkillLevelChanged = this->get_override( "OnSkillLevelChanged" );
        if( func_OnSkillLevelChanged.ptr() != Py_None )
            try {
                func_OnSkillLevelChanged( iNewLevel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::OnSkillLevelChanged( iNewLevel );
            }
        else
            this->CGameRules::OnSkillLevelChanged( iNewLevel );
    }
    
    void default_OnSkillLevelChanged( int iNewLevel ) {
        CGameRules::OnSkillLevelChanged( iNewLevel );
    }

    virtual bool PlayFootstepSounds( ::CBasePlayer * pl ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayFootstepSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayFootstepSounds( boost::python::ptr(pl) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayFootstepSounds = this->get_override( "PlayFootstepSounds" );
        if( func_PlayFootstepSounds.ptr() != Py_None )
            try {
                return func_PlayFootstepSounds( boost::python::ptr(pl) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::PlayFootstepSounds( boost::python::ptr(pl) );
            }
        else
            return this->CGameRules::PlayFootstepSounds( boost::python::ptr(pl) );
    }
    
    bool default_PlayFootstepSounds( ::CBasePlayer * pl ) {
        return CGameRules::PlayFootstepSounds( boost::python::ptr(pl) );
    }

    virtual bool PlayTextureSounds(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "PlayTextureSounds: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling PlayTextureSounds(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_PlayTextureSounds = this->get_override( "PlayTextureSounds" );
        if( func_PlayTextureSounds.ptr() != Py_None )
            try {
                return func_PlayTextureSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::PlayTextureSounds(  );
            }
        else
            return this->CGameRules::PlayTextureSounds(  );
    }
    
    bool default_PlayTextureSounds(  ) {
        return CGameRules::PlayTextureSounds( );
    }

    virtual void PlayerThink( ::CBasePlayer * pPlayer ){
        bp::override func_PlayerThink = this->get_override( "PlayerThink" );
        try {
            func_PlayerThink( boost::python::ptr(pPlayer) );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void Precache(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "Precache: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling Precache(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::Precache(  );
            }
        else
            this->CGameRules::Precache(  );
    }
    
    void default_Precache(  ) {
        CGameRules::Precache( );
    }

    virtual void ProcessVerboseLogOutput(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ProcessVerboseLogOutput: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ProcessVerboseLogOutput(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ProcessVerboseLogOutput = this->get_override( "ProcessVerboseLogOutput" );
        if( func_ProcessVerboseLogOutput.ptr() != Py_None )
            try {
                func_ProcessVerboseLogOutput(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ProcessVerboseLogOutput(  );
            }
        else
            this->CGameRules::ProcessVerboseLogOutput(  );
    }
    
    void default_ProcessVerboseLogOutput(  ) {
        CGameRules::ProcessVerboseLogOutput( );
    }

    virtual void RadiusDamage( ::CTakeDamageInfo const & info, ::Vector const & vecSrc, float flRadius, int iClassIgnore, ::CBaseEntity * pEntityIgnore ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "RadiusDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling RadiusDamage( boost::ref(info), boost::ref(vecSrc), flRadius, iClassIgnore, boost::python::ptr(pEntityIgnore) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_RadiusDamage = this->get_override( "RadiusDamage" );
        if( func_RadiusDamage.ptr() != Py_None )
            try {
                func_RadiusDamage( boost::ref(info), boost::ref(vecSrc), flRadius, iClassIgnore, boost::python::ptr(pEntityIgnore) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::RadiusDamage( boost::ref(info), boost::ref(vecSrc), flRadius, iClassIgnore, boost::python::ptr(pEntityIgnore) );
            }
        else
            this->CGameRules::RadiusDamage( boost::ref(info), boost::ref(vecSrc), flRadius, iClassIgnore, boost::python::ptr(pEntityIgnore) );
    }
    
    void default_RadiusDamage( ::CTakeDamageInfo const & info, ::Vector const & vecSrc, float flRadius, int iClassIgnore, ::CBaseEntity * pEntityIgnore ) {
        CGameRules::RadiusDamage( boost::ref(info), boost::ref(vecSrc), flRadius, iClassIgnore, boost::python::ptr(pEntityIgnore) );
    }

    virtual void RefreshSkillData( bool forceUpdate ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "RefreshSkillData: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling RefreshSkillData( forceUpdate ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_RefreshSkillData = this->get_override( "RefreshSkillData" );
        if( func_RefreshSkillData.ptr() != Py_None )
            try {
                func_RefreshSkillData( forceUpdate );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::RefreshSkillData( forceUpdate );
            }
        else
            this->CGameRules::RefreshSkillData( forceUpdate );
    }
    
    void default_RefreshSkillData( bool forceUpdate ) {
        CGameRules::RefreshSkillData( forceUpdate );
    }

    virtual void ResetMapCycleTimeStamp(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ResetMapCycleTimeStamp: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ResetMapCycleTimeStamp(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ResetMapCycleTimeStamp = this->get_override( "ResetMapCycleTimeStamp" );
        if( func_ResetMapCycleTimeStamp.ptr() != Py_None )
            try {
                func_ResetMapCycleTimeStamp(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ResetMapCycleTimeStamp(  );
            }
        else
            this->CGameRules::ResetMapCycleTimeStamp(  );
    }
    
    void default_ResetMapCycleTimeStamp(  ) {
        CGameRules::ResetMapCycleTimeStamp( );
    }

    virtual char const * SetDefaultPlayerTeam( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetDefaultPlayerTeam: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetDefaultPlayerTeam( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetDefaultPlayerTeam = this->get_override( "SetDefaultPlayerTeam" );
        if( func_SetDefaultPlayerTeam.ptr() != Py_None )
            try {
                return func_SetDefaultPlayerTeam( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::SetDefaultPlayerTeam( boost::python::ptr(pPlayer) );
            }
        else
            return this->CGameRules::SetDefaultPlayerTeam( boost::python::ptr(pPlayer) );
    }
    
    char const * default_SetDefaultPlayerTeam( ::CBasePlayer * pPlayer ) {
        return CGameRules::SetDefaultPlayerTeam( boost::python::ptr(pPlayer) );
    }

    virtual void SetSkillLevel( int iLevel ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "SetSkillLevel: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling SetSkillLevel( iLevel ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_SetSkillLevel = this->get_override( "SetSkillLevel" );
        if( func_SetSkillLevel.ptr() != Py_None )
            try {
                func_SetSkillLevel( iLevel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::SetSkillLevel( iLevel );
            }
        else
            this->CGameRules::SetSkillLevel( iLevel );
    }
    
    void default_SetSkillLevel( int iLevel ) {
        CGameRules::SetSkillLevel( iLevel );
    }

    virtual bool ShouldAutoAim( ::CBasePlayer * pPlayer, ::edict_t * target ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldAutoAim: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldAutoAim( boost::python::ptr(pPlayer), boost::python::ptr(target) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldAutoAim = this->get_override( "ShouldAutoAim" );
        if( func_ShouldAutoAim.ptr() != Py_None )
            try {
                return func_ShouldAutoAim( boost::python::ptr(pPlayer), boost::python::ptr(target) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldAutoAim( boost::python::ptr(pPlayer), boost::python::ptr(target) );
            }
        else
            return this->CGameRules::ShouldAutoAim( boost::python::ptr(pPlayer), boost::python::ptr(target) );
    }
    
    bool default_ShouldAutoAim( ::CBasePlayer * pPlayer, ::edict_t * target ) {
        return CGameRules::ShouldAutoAim( boost::python::ptr(pPlayer), boost::python::ptr(target) );
    }

    virtual bool ShouldBurningPropsEmitLight(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldBurningPropsEmitLight: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldBurningPropsEmitLight(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldBurningPropsEmitLight = this->get_override( "ShouldBurningPropsEmitLight" );
        if( func_ShouldBurningPropsEmitLight.ptr() != Py_None )
            try {
                return func_ShouldBurningPropsEmitLight(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldBurningPropsEmitLight(  );
            }
        else
            return this->CGameRules::ShouldBurningPropsEmitLight(  );
    }
    
    bool default_ShouldBurningPropsEmitLight(  ) {
        return CGameRules::ShouldBurningPropsEmitLight( );
    }

    virtual bool ShouldDrawHeadLabels(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldDrawHeadLabels: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldDrawHeadLabels(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldDrawHeadLabels = this->get_override( "ShouldDrawHeadLabels" );
        if( func_ShouldDrawHeadLabels.ptr() != Py_None )
            try {
                return func_ShouldDrawHeadLabels(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldDrawHeadLabels(  );
            }
        else
            return this->CGameRules::ShouldDrawHeadLabels(  );
    }
    
    bool default_ShouldDrawHeadLabels(  ) {
        return CGameRules::ShouldDrawHeadLabels( );
    }

    virtual bool ShouldUseRobustRadiusDamage( ::CBaseEntity * pEntity ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShouldUseRobustRadiusDamage: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShouldUseRobustRadiusDamage( boost::python::ptr(pEntity) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShouldUseRobustRadiusDamage = this->get_override( "ShouldUseRobustRadiusDamage" );
        if( func_ShouldUseRobustRadiusDamage.ptr() != Py_None )
            try {
                return func_ShouldUseRobustRadiusDamage( boost::python::ptr(pEntity) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::ShouldUseRobustRadiusDamage( boost::python::ptr(pEntity) );
            }
        else
            return this->CGameRules::ShouldUseRobustRadiusDamage( boost::python::ptr(pEntity) );
    }
    
    bool default_ShouldUseRobustRadiusDamage( ::CBaseEntity * pEntity ) {
        return CGameRules::ShouldUseRobustRadiusDamage( boost::python::ptr(pEntity) );
    }

    virtual void ShutdownGamerules(  ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "ShutdownGamerules: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling ShutdownGamerules(  ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_ShutdownGamerules = this->get_override( "ShutdownGamerules" );
        if( func_ShutdownGamerules.ptr() != Py_None )
            try {
                func_ShutdownGamerules(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::ShutdownGamerules(  );
            }
        else
            this->CGameRules::ShutdownGamerules(  );
    }
    
    void default_ShutdownGamerules(  ) {
        CGameRules::ShutdownGamerules( );
    }

    virtual void UpdateClientData( ::CBasePlayer * pPlayer ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "UpdateClientData: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling UpdateClientData( boost::python::ptr(pPlayer) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_UpdateClientData = this->get_override( "UpdateClientData" );
        if( func_UpdateClientData.ptr() != Py_None )
            try {
                func_UpdateClientData( boost::python::ptr(pPlayer) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CGameRules::UpdateClientData( boost::python::ptr(pPlayer) );
            }
        else
            this->CGameRules::UpdateClientData( boost::python::ptr(pPlayer) );
    }
    
    void default_UpdateClientData( ::CBasePlayer * pPlayer ) {
        CGameRules::UpdateClientData( boost::python::ptr(pPlayer) );
    }

    virtual float WeaponTraceEntity( ::CBaseEntity * pEntity, ::Vector const & vecStart, ::Vector const & vecEnd, unsigned int mask, ::trace_t * ptr ) {
        #if defined(_WIN32)
        #if defined(_DEBUG)
        Assert( SrcPySystem()->IsPythonRunning() );
        Assert( GetCurrentThreadId() == g_hPythonThreadID );
        #elif defined(PY_CHECKTHREADID)
        if( GetCurrentThreadId() != g_hPythonThreadID )
            Error( "WeaponTraceEntity: Client? %d. Thread ID is not the same as in which the python interpreter is initialized! %d != %d. Tell a developer.\n", CBaseEntity::IsClient(), g_hPythonThreadID, GetCurrentThreadId() );
        #endif // _DEBUG/PY_CHECKTHREADID
        #endif // _WIN32
        #if defined(_DEBUG) || defined(PY_CHECK_LOG_OVERRIDES)
        if( py_log_overrides.GetBool() )
            Msg("Calling WeaponTraceEntity( boost::python::ptr(pEntity), boost::ref(vecStart), boost::ref(vecEnd), mask, boost::python::ptr(ptr) ) of Class: CGameRules\n");
        #endif // _DEBUG/PY_CHECK_LOG_OVERRIDES
        bp::override func_WeaponTraceEntity = this->get_override( "WeaponTraceEntity" );
        if( func_WeaponTraceEntity.ptr() != Py_None )
            try {
                return func_WeaponTraceEntity( boost::python::ptr(pEntity), boost::ref(vecStart), boost::ref(vecEnd), mask, boost::python::ptr(ptr) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CGameRules::WeaponTraceEntity( boost::python::ptr(pEntity), boost::ref(vecStart), boost::ref(vecEnd), mask, boost::python::ptr(ptr) );
            }
        else
            return this->CGameRules::WeaponTraceEntity( boost::python::ptr(pEntity), boost::ref(vecStart), boost::ref(vecEnd), mask, boost::python::ptr(ptr) );
    }
    
    float default_WeaponTraceEntity( ::CBaseEntity * pEntity, ::Vector const & vecStart, ::Vector const & vecEnd, unsigned int mask, ::trace_t * ptr ) {
        return CGameRules::WeaponTraceEntity( boost::python::ptr(pEntity), boost::ref(vecStart), boost::ref(vecEnd), mask, boost::python::ptr(ptr) );
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

void register_CSingleplayRules_class(){

    bp::class_< CSingleplayRules_wrapper, bp::bases< CGameRules >, boost::noncopyable >( "CSingleplayRules", bp::init< >() )    
        .def( 
            "AllowAutoTargetCrosshair"
            , (bool ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::AllowAutoTargetCrosshair)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_AllowAutoTargetCrosshair) )    
        .def( 
            "AllowDamage"
            , (bool ( ::CSingleplayRules::* )( ::CBaseEntity *,::CTakeDamageInfo const & ) )(&::CSingleplayRules::AllowDamage)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseEntity *,::CTakeDamageInfo const & ) )(&CSingleplayRules_wrapper::default_AllowDamage)
            , ( bp::arg("pVictim"), bp::arg("info") ) )    
        .def( 
            "CanHaveItem"
            , (bool ( ::CSingleplayRules::* )( ::CBasePlayer *,::CItem * ) )(&::CSingleplayRules::CanHaveItem)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CItem * ) )(&CSingleplayRules_wrapper::default_CanHaveItem)
            , ( bp::arg("pPlayer"), bp::arg("pItem") ) )    
        .def( 
            "ClientConnected"
            , (bool ( ::CSingleplayRules::* )( ::edict_t *,char const *,char const *,char *,int ) )(&::CSingleplayRules::ClientConnected)
            , (bool ( CSingleplayRules_wrapper::* )( ::edict_t *,char const *,char const *,char *,int ) )(&CSingleplayRules_wrapper::default_ClientConnected)
            , ( bp::arg("pEntity"), bp::arg("pszName"), bp::arg("pszAddress"), bp::arg("reject"), bp::arg("maxrejectlen") ) )    
        .def( 
            "ClientDisconnected"
            , (void ( ::CSingleplayRules::* )( ::edict_t * ) )(&::CSingleplayRules::ClientDisconnected)
            , (void ( CSingleplayRules_wrapper::* )( ::edict_t * ) )(&CSingleplayRules_wrapper::default_ClientDisconnected)
            , ( bp::arg("pClient") ) )    
        .def( 
            "Damage_GetNoPhysicsForce"
            , (int ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::Damage_GetNoPhysicsForce)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Damage_GetNoPhysicsForce) )    
        .def( 
            "Damage_GetShouldGibCorpse"
            , (int ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::Damage_GetShouldGibCorpse)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Damage_GetShouldGibCorpse) )    
        .def( 
            "Damage_GetShouldNotBleed"
            , (int ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::Damage_GetShouldNotBleed)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Damage_GetShouldNotBleed) )    
        .def( 
            "Damage_GetShowOnHud"
            , (int ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::Damage_GetShowOnHud)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Damage_GetShowOnHud) )    
        .def( 
            "Damage_GetTimeBased"
            , (int ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::Damage_GetTimeBased)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Damage_GetTimeBased) )    
        .def( 
            "Damage_IsTimeBased"
            , (bool ( ::CSingleplayRules::* )( int ) )(&::CSingleplayRules::Damage_IsTimeBased)
            , (bool ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_Damage_IsTimeBased)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_NoPhysicsForce"
            , (bool ( ::CSingleplayRules::* )( int ) )(&::CSingleplayRules::Damage_NoPhysicsForce)
            , (bool ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_Damage_NoPhysicsForce)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_ShouldGibCorpse"
            , (bool ( ::CSingleplayRules::* )( int ) )(&::CSingleplayRules::Damage_ShouldGibCorpse)
            , (bool ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_Damage_ShouldGibCorpse)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_ShouldNotBleed"
            , (bool ( ::CSingleplayRules::* )( int ) )(&::CSingleplayRules::Damage_ShouldNotBleed)
            , (bool ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_Damage_ShouldNotBleed)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "Damage_ShowOnHUD"
            , (bool ( ::CSingleplayRules::* )( int ) )(&::CSingleplayRules::Damage_ShowOnHUD)
            , (bool ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_Damage_ShowOnHUD)
            , ( bp::arg("iDmgType") ) )    
        .def( 
            "DeadPlayerAmmo"
            , (int ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::DeadPlayerAmmo)
            , (int ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_DeadPlayerAmmo)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "DeadPlayerWeapons"
            , (int ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::DeadPlayerWeapons)
            , (int ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_DeadPlayerWeapons)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "DeathNotice"
            , (void ( ::CSingleplayRules::* )( ::CBasePlayer *,::CTakeDamageInfo const & ) )(&::CSingleplayRules::DeathNotice)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CTakeDamageInfo const & ) )(&CSingleplayRules_wrapper::default_DeathNotice)
            , ( bp::arg("pVictim"), bp::arg("info") ) )    
        .def( 
            "FAllowFlashlight"
            , (bool ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::FAllowFlashlight)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_FAllowFlashlight) )    
        .def( 
            "FAllowNPCs"
            , (bool ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::FAllowNPCs)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_FAllowNPCs) )    
        .def( 
            "FPlayerCanRespawn"
            , (bool ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::FPlayerCanRespawn)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_FPlayerCanRespawn)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "FShouldSwitchWeapon"
            , (bool ( ::CSingleplayRules::* )( ::CBasePlayer *,::CBaseCombatWeapon * ) )(&::CSingleplayRules::FShouldSwitchWeapon)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_FShouldSwitchWeapon)
            , ( bp::arg("pPlayer"), bp::arg("pWeapon") ) )    
        .def( 
            "FlHealthChargerRechargeTime"
            , (float ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::FlHealthChargerRechargeTime)
            , (float ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_FlHealthChargerRechargeTime) )    
        .def( 
            "FlItemRespawnTime"
            , (float ( ::CSingleplayRules::* )( ::CItem * ) )(&::CSingleplayRules::FlItemRespawnTime)
            , (float ( CSingleplayRules_wrapper::* )( ::CItem * ) )(&CSingleplayRules_wrapper::default_FlItemRespawnTime)
            , ( bp::arg("pItem") ) )    
        .def( 
            "FlPlayerFallDamage"
            , (float ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::FlPlayerFallDamage)
            , (float ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_FlPlayerFallDamage)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "FlPlayerSpawnTime"
            , (float ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::FlPlayerSpawnTime)
            , (float ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_FlPlayerSpawnTime)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "FlWeaponRespawnTime"
            , (float ( ::CSingleplayRules::* )( ::CBaseCombatWeapon * ) )(&::CSingleplayRules::FlWeaponRespawnTime)
            , (float ( CSingleplayRules_wrapper::* )( ::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_FlWeaponRespawnTime)
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "FlWeaponTryRespawn"
            , (float ( ::CSingleplayRules::* )( ::CBaseCombatWeapon * ) )(&::CSingleplayRules::FlWeaponTryRespawn)
            , (float ( CSingleplayRules_wrapper::* )( ::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_FlWeaponTryRespawn)
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "GetAutoAimMode"
            , (int ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::GetAutoAimMode)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_GetAutoAimMode) )    
        .def( 
            "GetNextBestWeapon"
            , (::CBaseCombatWeapon * ( ::CSingleplayRules::* )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) )(&::CSingleplayRules::GetNextBestWeapon)
            , (::CBaseCombatWeapon * ( CSingleplayRules_wrapper::* )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_GetNextBestWeapon)
            , ( bp::arg("pPlayer"), bp::arg("pCurrentWeapon") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetTeamID"
            , (char const * ( ::CSingleplayRules::* )( ::CBaseEntity * ) )(&::CSingleplayRules::GetTeamID)
            , (char const * ( CSingleplayRules_wrapper::* )( ::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_GetTeamID)
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IPointsForKill"
            , (int ( ::CSingleplayRules::* )( ::CBasePlayer *,::CBasePlayer * ) )(&::CSingleplayRules::IPointsForKill)
            , (int ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_IPointsForKill)
            , ( bp::arg("pAttacker"), bp::arg("pKilled") ) )    
        .def( 
            "InitHUD"
            , (void ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::InitHUD)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_InitHUD)
            , ( bp::arg("pl") ) )    
        .def( 
            "IsAllowedToSpawn"
            , (bool ( ::CSingleplayRules::* )( ::CBaseEntity * ) )(&::CSingleplayRules::IsAllowedToSpawn)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_IsAllowedToSpawn)
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IsCoOp"
            , (bool ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::IsCoOp)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_IsCoOp) )    
        .def( 
            "IsDeathmatch"
            , (bool ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::IsDeathmatch)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_IsDeathmatch) )    
        .def( 
            "IsMultiplayer"
            , (bool ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::IsMultiplayer)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_IsMultiplayer) )    
        .def( 
            "ItemShouldRespawn"
            , (int ( ::CSingleplayRules::* )( ::CItem * ) )(&::CSingleplayRules::ItemShouldRespawn)
            , (int ( CSingleplayRules_wrapper::* )( ::CItem * ) )(&CSingleplayRules_wrapper::default_ItemShouldRespawn)
            , ( bp::arg("pItem") ) )    
        .def( 
            "PlayerCanHearChat"
            , (bool ( ::CSingleplayRules::* )( ::CBasePlayer *,::CBasePlayer * ) )(&::CSingleplayRules::PlayerCanHearChat)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_PlayerCanHearChat)
            , ( bp::arg("pListener"), bp::arg("pSpeaker") ) )    
        .def( 
            "PlayerGotAmmo"
            , (void ( ::CSingleplayRules::* )( ::CBaseCombatCharacter *,char *,int ) )(&::CSingleplayRules::PlayerGotAmmo)
            , (void ( CSingleplayRules_wrapper::* )( ::CBaseCombatCharacter *,char *,int ) )(&CSingleplayRules_wrapper::default_PlayerGotAmmo)
            , ( bp::arg("pPlayer"), bp::arg("szName"), bp::arg("iCount") ) )    
        .def( 
            "PlayerGotItem"
            , (void ( ::CSingleplayRules::* )( ::CBasePlayer *,::CItem * ) )(&::CSingleplayRules::PlayerGotItem)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CItem * ) )(&CSingleplayRules_wrapper::default_PlayerGotItem)
            , ( bp::arg("pPlayer"), bp::arg("pItem") ) )    
        .def( 
            "PlayerKilled"
            , (void ( ::CSingleplayRules::* )( ::CBasePlayer *,::CTakeDamageInfo const & ) )(&::CSingleplayRules::PlayerKilled)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CTakeDamageInfo const & ) )(&CSingleplayRules_wrapper::default_PlayerKilled)
            , ( bp::arg("pVictim"), bp::arg("info") ) )    
        .def( 
            "PlayerRelationship"
            , (int ( ::CSingleplayRules::* )( ::CBaseEntity *,::CBaseEntity * ) )(&::CSingleplayRules::PlayerRelationship)
            , (int ( CSingleplayRules_wrapper::* )( ::CBaseEntity *,::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_PlayerRelationship)
            , ( bp::arg("pPlayer"), bp::arg("pTarget") ) )    
        .def( 
            "PlayerSpawn"
            , (void ( ::CSingleplayRules::* )( ::CBasePlayer * ) )(&::CSingleplayRules::PlayerSpawn)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_PlayerSpawn)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "SwitchToNextBestWeapon"
            , (bool ( ::CSingleplayRules::* )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) )(&::CSingleplayRules::SwitchToNextBestWeapon)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseCombatCharacter *,::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_SwitchToNextBestWeapon)
            , ( bp::arg("pPlayer"), bp::arg("pCurrentWeapon") ) )    
        .def( 
            "Think"
            , (void ( ::CSingleplayRules::* )(  ) )(&::CSingleplayRules::Think)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Think) )    
        .def( 
            "VecItemRespawnAngles"
            , (::QAngle ( ::CSingleplayRules::* )( ::CItem * ) )(&::CSingleplayRules::VecItemRespawnAngles)
            , (::QAngle ( CSingleplayRules_wrapper::* )( ::CItem * ) )(&CSingleplayRules_wrapper::default_VecItemRespawnAngles)
            , ( bp::arg("pItem") ) )    
        .def( 
            "VecItemRespawnSpot"
            , (::Vector ( ::CSingleplayRules::* )( ::CItem * ) )(&::CSingleplayRules::VecItemRespawnSpot)
            , (::Vector ( CSingleplayRules_wrapper::* )( ::CItem * ) )(&CSingleplayRules_wrapper::default_VecItemRespawnSpot)
            , ( bp::arg("pItem") ) )    
        .def( 
            "VecWeaponRespawnSpot"
            , (::Vector ( ::CSingleplayRules::* )( ::CBaseCombatWeapon * ) )(&::CSingleplayRules::VecWeaponRespawnSpot)
            , (::Vector ( CSingleplayRules_wrapper::* )( ::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_VecWeaponRespawnSpot)
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "WeaponShouldRespawn"
            , (int ( ::CSingleplayRules::* )( ::CBaseCombatWeapon * ) )(&::CSingleplayRules::WeaponShouldRespawn)
            , (int ( CSingleplayRules_wrapper::* )( ::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_WeaponShouldRespawn)
            , ( bp::arg("pWeapon") ) )    
        .def( 
            "AIClassText"
            , (char const * ( ::CGameRules::* )( int ) )(&::CGameRules::AIClassText)
            , (char const * ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_AIClassText)
            , ( bp::arg("classType") ) )    
        .def( 
            "AdjustPlayerDamageInflicted"
            , (float ( ::CGameRules::* )( float ) )(&::CGameRules::AdjustPlayerDamageInflicted)
            , (float ( CSingleplayRules_wrapper::* )( float ) )(&CSingleplayRules_wrapper::default_AdjustPlayerDamageInflicted)
            , ( bp::arg("damage") ) )    
        .def( 
            "AdjustPlayerDamageTaken"
            , (void ( ::CGameRules::* )( ::CTakeDamageInfo * ) )(&::CGameRules::AdjustPlayerDamageTaken)
            , (void ( CSingleplayRules_wrapper::* )( ::CTakeDamageInfo * ) )(&CSingleplayRules_wrapper::default_AdjustPlayerDamageTaken)
            , ( bp::arg("pInfo") ) )    
        .def( 
            "AllowThirdPersonCamera"
            , (bool ( ::CGameRules::* )(  ) )(&::CGameRules::AllowThirdPersonCamera)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_AllowThirdPersonCamera) )    
        .def( 
            "CanEntityBeUsePushed"
            , (bool ( ::CGameRules::* )( ::CBaseEntity * ) )(&::CGameRules::CanEntityBeUsePushed)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_CanEntityBeUsePushed)
            , ( bp::arg("pEnt") ) )    
        .def( 
            "CanHaveAmmo"
            , (bool ( ::CGameRules::* )( ::CBaseCombatCharacter *,int ) )(&::CGameRules::CanHaveAmmo)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseCombatCharacter *,int ) )(&CSingleplayRules_wrapper::default_CanHaveAmmo)
            , ( bp::arg("pPlayer"), bp::arg("iAmmoIndex") ) )    
        .def( 
            "CanHaveAmmo"
            , (bool ( ::CGameRules::* )( ::CBaseCombatCharacter *,char const * ) )(&::CGameRules::CanHaveAmmo)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseCombatCharacter *,char const * ) )(&CSingleplayRules_wrapper::default_CanHaveAmmo)
            , ( bp::arg("pPlayer"), bp::arg("szName") ) )    
        .def( 
            "CanHavePlayerItem"
            , (bool ( ::CGameRules::* )( ::CBasePlayer *,::CBaseCombatWeapon * ) )(&::CGameRules::CanHavePlayerItem)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CBaseCombatWeapon * ) )(&CSingleplayRules_wrapper::default_CanHavePlayerItem)
            , ( bp::arg("pPlayer"), bp::arg("pWeapon") ) )    
        .def( 
            "ChangePlayerTeam"
            , (void ( ::CGameRules::* )( ::CBasePlayer *,char const *,bool,bool ) )(&::CGameRules::ChangePlayerTeam)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,char const *,bool,bool ) )(&CSingleplayRules_wrapper::default_ChangePlayerTeam)
            , ( bp::arg("pPlayer"), bp::arg("pTeamName"), bp::arg("bKill"), bp::arg("bGib") ) )    
        .def( 
            "CheckChatText"
            , (void ( ::CGameRules::* )( ::CBasePlayer *,char * ) )(&::CGameRules::CheckChatText)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,char * ) )(&CSingleplayRules_wrapper::default_CheckChatText)
            , ( bp::arg("pPlayer"), bp::arg("pText") ) )    
        .def( 
            "CheckHaptics"
            , (void ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::CheckHaptics)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_CheckHaptics)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "ClientCommand"
            , (bool ( ::CGameRules::* )( ::CBaseEntity *,::CCommand const & ) )(&::CGameRules::ClientCommand)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseEntity *,::CCommand const & ) )(&CSingleplayRules_wrapper::default_ClientCommand)
            , ( bp::arg("pEdict"), bp::arg("args") ) )    
        .def( 
            "ClientCommandKeyValues"
            , (void ( ::CGameRules::* )( ::edict_t *,::KeyValues * ) )(&::CGameRules::ClientCommandKeyValues)
            , (void ( CSingleplayRules_wrapper::* )( ::edict_t *,::KeyValues * ) )(&CSingleplayRules_wrapper::default_ClientCommandKeyValues)
            , ( bp::arg("pEntity"), bp::arg("pKeyValues") ) )    
        .def( 
            "ClientSettingsChanged"
            , (void ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::ClientSettingsChanged)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_ClientSettingsChanged)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "ClientSpawned"
            , (void ( ::CGameRules::* )( ::edict_t * ) )(&::CGameRules::ClientSpawned)
            , (void ( CSingleplayRules_wrapper::* )( ::edict_t * ) )(&CSingleplayRules_wrapper::default_ClientSpawned)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "CreateCustomNetworkStringTables"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::CreateCustomNetworkStringTables)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_CreateCustomNetworkStringTables) )    
        .def( 
            "CreateStandardEntities"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::CreateStandardEntities)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_CreateStandardEntities) )    
        .def( 
            "DefaultFOV"
            , (int ( ::CGameRules::* )(  ) )(&::CGameRules::DefaultFOV)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_DefaultFOV) )    
        .def( 
            "EndGameFrame"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::EndGameFrame)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_EndGameFrame) )    
        .def( 
            "EndMultiplayerGame"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::EndMultiplayerGame)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_EndMultiplayerGame) )    
        .def( 
            "FPlayerCanTakeDamage"
            , (bool ( ::CGameRules::* )( ::CBasePlayer *,::CBaseEntity * ) )(&::CGameRules::FPlayerCanTakeDamage)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_FPlayerCanTakeDamage)
            , ( bp::arg("pPlayer"), bp::arg("pAttacker") ) )    
        .def( 
            "FlHEVChargerRechargeTime"
            , (float ( ::CGameRules::* )(  ) )(&::CGameRules::FlHEVChargerRechargeTime)
            , (float ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_FlHEVChargerRechargeTime) )    
        .def( 
            "FlPlayerFallDeathDoesScreenFade"
            , (bool ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::FlPlayerFallDeathDoesScreenFade)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_FlPlayerFallDeathDoesScreenFade)
            , ( bp::arg("pl") ) )    
        .def( 
            "FrameUpdatePostEntityThink"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::FrameUpdatePostEntityThink)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_FrameUpdatePostEntityThink) )    
        .def( 
            "GetAmmoQuantityScale"
            , (float ( ::CGameRules::* )( int ) )(&::CGameRules::GetAmmoQuantityScale)
            , (float ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_GetAmmoQuantityScale)
            , ( bp::arg("iAmmoIndex") ) )    
        .def( 
            "GetAutoAimScale"
            , (float ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::GetAutoAimScale)
            , (float ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_GetAutoAimScale)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "GetChatFormat"
            , (char const * ( ::CGameRules::* )( bool,::CBasePlayer * ) )(&::CGameRules::GetChatFormat)
            , (char const * ( CSingleplayRules_wrapper::* )( bool,::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_GetChatFormat)
            , ( bp::arg("bTeamOnly"), bp::arg("pPlayer") ) )    
        .def( 
            "GetChatLocation"
            , (char const * ( ::CGameRules::* )( bool,::CBasePlayer * ) )(&::CGameRules::GetChatLocation)
            , (char const * ( CSingleplayRules_wrapper::* )( bool,::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_GetChatLocation)
            , ( bp::arg("bTeamOnly"), bp::arg("pPlayer") ) )    
        .def( 
            "GetChatPrefix"
            , (char const * ( ::CGameRules::* )( bool,::CBasePlayer * ) )(&::CGameRules::GetChatPrefix)
            , (char const * ( CSingleplayRules_wrapper::* )( bool,::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_GetChatPrefix)
            , ( bp::arg("bTeamOnly"), bp::arg("pPlayer") ) )    
        .def( 
            "GetDamageCustomString"
            , (char const * ( ::CGameRules::* )( ::CTakeDamageInfo const & ) )(&::CGameRules::GetDamageCustomString)
            , (char const * ( CSingleplayRules_wrapper::* )( ::CTakeDamageInfo const & ) )(&CSingleplayRules_wrapper::default_GetDamageCustomString)
            , ( bp::arg("info") ) )    
        .def( 
            "GetDamageMultiplier"
            , (float ( ::CGameRules::* )(  ) )(&::CGameRules::GetDamageMultiplier)
            , (float ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_GetDamageMultiplier) )    
        .def( 
            "GetGameDescription"
            , (char const * ( ::CGameRules::* )(  ) )(&::CGameRules::GetGameDescription)
            , (char const * ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_GetGameDescription) )    
        .def( 
            "GetGameType"
            , (int ( ::CGameRules::* )(  ) )(&::CGameRules::GetGameType)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_GetGameType) )    
        .def( 
            "GetGameTypeName"
            , (char const * ( ::CGameRules::* )(  ) )(&::CGameRules::GetGameTypeName)
            , (char const * ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_GetGameTypeName) )    
        .def( 
            "GetIndexedTeamName"
            , (char const * ( ::CGameRules::* )( int ) )(&::CGameRules::GetIndexedTeamName)
            , (char const * ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_GetIndexedTeamName)
            , ( bp::arg("teamIndex") ) )    
        .def( 
            "GetPlayerSpawnSpot"
            , (::CBaseEntity * ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::GetPlayerSpawnSpot)
            , (::CBaseEntity * ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_GetPlayerSpawnSpot)
            , ( bp::arg("pPlayer") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSkillLevel"
            , (int ( ::CGameRules::* )(  ) )(&::CGameRules::GetSkillLevel)
            , (int ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_GetSkillLevel) )    
        .def( 
            "GetTaggedConVarList"
            , (void ( ::CGameRules::* )( ::KeyValues * ) )(&::CGameRules::GetTaggedConVarList)
            , (void ( CSingleplayRules_wrapper::* )( ::KeyValues * ) )(&CSingleplayRules_wrapper::default_GetTaggedConVarList)
            , ( bp::arg("pCvarTagList") ) )    
        .def( 
            "GetTeamIndex"
            , (int ( ::CGameRules::* )( char const * ) )(&::CGameRules::GetTeamIndex)
            , (int ( CSingleplayRules_wrapper::* )( char const * ) )(&CSingleplayRules_wrapper::default_GetTeamIndex)
            , ( bp::arg("pTeamName") ) )    
        .def( 
            "InRoundRestart"
            , (bool ( ::CGameRules::* )(  ) )(&::CGameRules::InRoundRestart)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_InRoundRestart) )    
        .def( 
            "InitDefaultAIRelationships"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::InitDefaultAIRelationships)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_InitDefaultAIRelationships) )    
        .def( 
            "InitGamerules"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::InitGamerules)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_InitGamerules) )    
        .def( 
            "IsConnectedUserInfoChangeAllowed"
            , (bool ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::IsConnectedUserInfoChangeAllowed)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_IsConnectedUserInfoChangeAllowed)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "IsHolidayActive"
            , (bool ( ::CGameRules::* )( int ) const)(&::CGameRules::IsHolidayActive)
            , (bool ( CSingleplayRules_wrapper::* )( int ) const)(&CSingleplayRules_wrapper::default_IsHolidayActive)
            , ( bp::arg("eHoliday") ) )    
        .def( 
            "IsSkillLevel"
            , (bool ( ::CGameRules::* )( int ) )(&::CGameRules::IsSkillLevel)
            , (bool ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_IsSkillLevel)
            , ( bp::arg("iLevel") ) )    
        .def( 
            "IsSpawnPointValid"
            , (bool ( ::CGameRules::* )( ::CBaseEntity *,::CBasePlayer * ) )(&::CGameRules::IsSpawnPointValid)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseEntity *,::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_IsSpawnPointValid)
            , ( bp::arg("pSpot"), bp::arg("pPlayer") ) )    
        .def( 
            "IsTeamplay"
            , (bool ( ::CGameRules::* )(  ) )(&::CGameRules::IsTeamplay)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_IsTeamplay) )    
        .def( 
            "IsValidTeam"
            , (bool ( ::CGameRules::* )( char const * ) )(&::CGameRules::IsValidTeam)
            , (bool ( CSingleplayRules_wrapper::* )( char const * ) )(&CSingleplayRules_wrapper::default_IsValidTeam)
            , ( bp::arg("pTeamName") ) )    
        .def( 
            "LevelShutdown"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::LevelShutdown)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_LevelShutdown) )    
        .def( 
            "MarkAchievement"
            , (void ( ::CGameRules::* )( ::IRecipientFilter &,char const * ) )(&::CGameRules::MarkAchievement)
            , (void ( CSingleplayRules_wrapper::* )( ::IRecipientFilter &,char const * ) )(&CSingleplayRules_wrapper::default_MarkAchievement)
            , ( bp::arg("filter"), bp::arg("pchAchievementName") ) )    
        .def( 
            "Name"
            , (char const * ( ::CGameRules::* )(  ) )(&::CGameRules::Name)
            , (char const * ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Name) )    
        .def( 
            "OnFileReceived"
            , (void ( ::CGameRules::* )( char const *,unsigned int ) )(&::CGameRules::OnFileReceived)
            , (void ( CSingleplayRules_wrapper::* )( char const *,unsigned int ) )(&CSingleplayRules_wrapper::default_OnFileReceived)
            , ( bp::arg("fileName"), bp::arg("transferID") ) )    
        .def( 
            "OnNavMeshLoad"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::OnNavMeshLoad)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_OnNavMeshLoad) )    
        .def( 
            "OnSkillLevelChanged"
            , (void ( ::CGameRules::* )( int ) )(&::CGameRules::OnSkillLevelChanged)
            , (void ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_OnSkillLevelChanged)
            , ( bp::arg("iNewLevel") ) )    
        .def( 
            "PlayFootstepSounds"
            , (bool ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::PlayFootstepSounds)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_PlayFootstepSounds)
            , ( bp::arg("pl") ) )    
        .def( 
            "PlayTextureSounds"
            , (bool ( ::CGameRules::* )(  ) )(&::CGameRules::PlayTextureSounds)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_PlayTextureSounds) )    
        .def( 
            "PlayerThink"
            , bp::pure_virtual( (void ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::PlayerThink) )
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "Precache"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::Precache)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_Precache) )    
        .def( 
            "ProcessVerboseLogOutput"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::ProcessVerboseLogOutput)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_ProcessVerboseLogOutput) )    
        .def( 
            "RadiusDamage"
            , (void ( ::CGameRules::* )( ::CTakeDamageInfo const &,::Vector const &,float,int,::CBaseEntity * ) )(&::CGameRules::RadiusDamage)
            , (void ( CSingleplayRules_wrapper::* )( ::CTakeDamageInfo const &,::Vector const &,float,int,::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_RadiusDamage)
            , ( bp::arg("info"), bp::arg("vecSrc"), bp::arg("flRadius"), bp::arg("iClassIgnore"), bp::arg("pEntityIgnore") ) )    
        .def( 
            "RefreshSkillData"
            , (void ( ::CGameRules::* )( bool ) )(&::CGameRules::RefreshSkillData)
            , (void ( CSingleplayRules_wrapper::* )( bool ) )(&CSingleplayRules_wrapper::default_RefreshSkillData)
            , ( bp::arg("forceUpdate") ) )    
        .def( 
            "ResetMapCycleTimeStamp"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::ResetMapCycleTimeStamp)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_ResetMapCycleTimeStamp) )    
        .def( 
            "SetDefaultPlayerTeam"
            , (char const * ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::SetDefaultPlayerTeam)
            , (char const * ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_SetDefaultPlayerTeam)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "SetSkillLevel"
            , (void ( ::CGameRules::* )( int ) )(&::CGameRules::SetSkillLevel)
            , (void ( CSingleplayRules_wrapper::* )( int ) )(&CSingleplayRules_wrapper::default_SetSkillLevel)
            , ( bp::arg("iLevel") ) )    
        .def( 
            "ShouldAutoAim"
            , (bool ( ::CGameRules::* )( ::CBasePlayer *,::edict_t * ) )(&::CGameRules::ShouldAutoAim)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBasePlayer *,::edict_t * ) )(&CSingleplayRules_wrapper::default_ShouldAutoAim)
            , ( bp::arg("pPlayer"), bp::arg("target") ) )    
        .def( 
            "ShouldBurningPropsEmitLight"
            , (bool ( ::CGameRules::* )(  ) )(&::CGameRules::ShouldBurningPropsEmitLight)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_ShouldBurningPropsEmitLight) )    
        .def( 
            "ShouldDrawHeadLabels"
            , (bool ( ::CGameRules::* )(  ) )(&::CGameRules::ShouldDrawHeadLabels)
            , (bool ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_ShouldDrawHeadLabels) )    
        .def( 
            "ShouldUseRobustRadiusDamage"
            , (bool ( ::CGameRules::* )( ::CBaseEntity * ) )(&::CGameRules::ShouldUseRobustRadiusDamage)
            , (bool ( CSingleplayRules_wrapper::* )( ::CBaseEntity * ) )(&CSingleplayRules_wrapper::default_ShouldUseRobustRadiusDamage)
            , ( bp::arg("pEntity") ) )    
        .def( 
            "ShutdownGamerules"
            , (void ( ::CGameRules::* )(  ) )(&::CGameRules::ShutdownGamerules)
            , (void ( CSingleplayRules_wrapper::* )(  ) )(&CSingleplayRules_wrapper::default_ShutdownGamerules) )    
        .def( 
            "UpdateClientData"
            , (void ( ::CGameRules::* )( ::CBasePlayer * ) )(&::CGameRules::UpdateClientData)
            , (void ( CSingleplayRules_wrapper::* )( ::CBasePlayer * ) )(&CSingleplayRules_wrapper::default_UpdateClientData)
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "WeaponTraceEntity"
            , (float ( ::CGameRules::* )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::trace_t * ) )(&::CGameRules::WeaponTraceEntity)
            , (float ( CSingleplayRules_wrapper::* )( ::CBaseEntity *,::Vector const &,::Vector const &,unsigned int,::trace_t * ) )(&CSingleplayRules_wrapper::default_WeaponTraceEntity)
            , ( bp::arg("pEntity"), bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("mask"), bp::arg("ptr") ) );

}

